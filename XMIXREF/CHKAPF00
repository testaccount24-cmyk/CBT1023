   ==> Scan of exec succeeded (rc <= 4)
   -------------------------------------------------
    1) See trace 's' exec in:
          SFRH66.PUBLIC.REXXXREF.SAMPLE.SCAN(CHKAPF00)

    2) Trace listing + XREF listing in:
          SFRH66.PUBLIC.REXXXREF.SAMPLE.XREF(CHKAPF00)
   -----------------------------------------

READY
    CHKAPF00
    Generated scan code/comment:   trace 's'
    Generated scan code/comment:   /*  rexx member for scan/xref was: */
    Generated scan code/comment:   /*     "SFRH66.REXX(CHKAPF00)"      */
    Generated scan code/comment:   /*      ---------------------       */
    Generated scan code/comment:   /*  date/time of XREF was:          */
    Generated scan code/comment:   /*     20231217 23:03:05            */
    Generated scan code/comment:   /*      ---------------------       */
     1 *-* /* REXX                                               CHKAPF00             */
     2 *-* /* <CHKAPF00> Initial REXX program comments                         -      */
     3 *-* /* CHKAPF00: Retrieves APF-LIST and checks each library for APF authorized */
     4 *-* /*            programs.  Reports on these programs.                        */
     5 *-* /*                                                                         */
     6 *-* /*                                                                         */
     7 *-* /* Description:                                                            */
     8 *-* /*                                                                         */
     9 *-* /* Requirements:                                                           */
    10 *-* /*   Host Command Environments: (hcenv)                                    */
    11 *-* /*               SDSF     SDSF                                             */
    12 *-* /*               ISPEXEC                                                   */
    13 *-* /*               REXXTOOL                                                  */
    14 *-* /*               TSO                                                       */
    15 *-* /*                                                                         */
    16 *-* /* Optional:                                                               */
    17 *-* /*               REXXTOOL                                                  */
    18 *-* /*                                                                         */
    19 *-* /* Parameters:                                                             */
    20 *-* /*                                                                         */
    21 *-* /* Return Codes:                                                           */
    22 *-* /*                                                                         */
    23 *-* /*                                                                         */
    24 *-* /* Changes:                                                                */
    25 *-* /* Date       Name     Vn/Lv Comment                                             */
    26 *-* /* ---------- -------- ----- ----------------------------------------------      */
    27 *-* /* 2021-06-06 RWSUHR   01.00 Started work on this.                               */
    28 *-* /* 2021-06-07 RWSUHR   01.01 Continue                                            */
    29 *-* /*                            Adding error traps                                 */
    30 *-* /*                            Adding rexxtool hcenv and selected functions       */
    31 *-* /* 2021-06-10 RWSUHR   01.02 Continue                                            */
    32 *-* /* 2021-06-11 RWSUHR   01.06 Continue                                            */
    33 *-* /* 2021-06-12 RWSUHR   01.07 Continue                                            */
    34 *-* /* 2021-06-14 RWSUHR   01.08 Continue                                            */
    35 *-* /* 2021-06-15 RWSUHR   01.15 the logic is working properly                       */
    36 *-* /* 2021-06-16 RWSUHR   01.16 Format of member counts with rexxtools d2pic() is   */
    37 *-* /*                            now conditional (only if rexxtools is available.)  */
    38 *-* /* 2021-06-29 RWSUHR   01.17 Build CSV file with the findings.                   */
    39 *-* /*                     01.18                                                     */
    40 *-* /*                     01.19                                                     */
    41 *-* /*                     01.20                                                     */
    42 *-* /* 2021-06-30 RWSUHR   01.23 Added code to write csv file                        */
    43 *-* /*                     01.24 Cleanup                                             */
    44 *-* /* 2021-07-01 RWSUHR   01.23 Further cleanup                                     */
    45 *-* /*                     01.27 removed unnecessary LMMFIND FREE command            */
    46 *-* /*                            (end of member list had been reached, so free was  */
    47 *-* /*                             superflous.)                                      */
    48 *-* /* 2021-07-02 RWSUHR   01.28 Change the work data set name (add the system name) */
    49 *-* /* 2021-10-19 SFRH66   01.29 remove trace 's'; fix variable name; fix syntax err */
    50 *-* /*                                                                               */
    51 *-* /* ----------------------------------------------------------------------+----1----+----2----+----3----+----4----+----5-
---+----6----+----7-                                                                           */
    54 *-* start_program:
    55 *-* current_routine = "start_program:"
    56 *-* xtrc = "O" /*                                                       */
    57 *-* /* xtrc = trace("?I")                                                  */
    58 *-* shcenv = address()
    59 *-* parse source info
    60 *-* last_update = '2021-09-02 12:24:46'              /* ISRINIT 12:24:46 */
    61 *-* pgm_version = 'v=01.29'                          /* ISRINIT 12:24:46 */
    62 *-* pgm_person  = 'SFRH48'                           /* ISRINIT 12:24:46 */
    63 *-* change_sysid= 'DR11'                             /* ISRINIT 12:24:46 */
    64 *-* member_name = 'CHKAPF00'                         /* ISRINIT 12:24:46 */
    65 *-* /* xtrc = "?I"                                                         */
    66 *-* xtrc = "O" /*                                                       */
    67 *-* xmsg = "ON" /*                                                             */
    68 *-* ISPF_table_rc = 0
    69 *-* /* xtrc = trace(xtrc)                                                  */
    70 *-* /*                                                                           */
    71 *-* /* Program Main Line                                                         */
    72 *-* /* Error and Attention control                                               */
    73 *-* /*                                                                           */
    74 *-* /* xtrc = trace("?i")                                                  */
    75 *-* arg arguments
    76 *-* call initialize arguments
    77 *-* initialize_rc = RESULT
    78 *-* /* say "V:" verbose "D:" database "G:" debug     */
    80 *-* call start_message
    81 *-* start_rc = RESULT
    82 *-* SIGNAL ON HALT    NAME   trap_halt_rtn
    83 *-* SIGNAL ON FAILURE NAME   trap_failure_rtn
    84 *-* SIGNAL ON NOVALUE NAME   trap_novalue_rtn
    85 *-* SIGNAL ON SYNTAX  NAME   trap_syntax_rtn
    86 *-* /*  SIGNAL ON ERROR   NAME   trap_error_rtn                          */
    87 *-* /* Load REXXTOOLS environments                                             */
    88 *-* /* Create startup environment and variables                                */
    90 *-* call set_variables
    91 *-* set_variables_rc = RESULT
    92 *-* /* xtrc = trace("?I")                                                  */
    93 *-* call check_rexxtools
    94 *-* check_rexxtools  = RESULT
    95 *-* call sdsf_routine
    96 *-* sdsf_routine_rc  = RESULT
    97 *-* /*      do nix = 1 to csv_line.0        say translate(format(length(csv_line.nix),3,0),"0"," ") "==>" csv_line.nix "<=="
        end   /* do nix = 1 to csv_line.0                                           */         */
   102 *-* /* xtrc = trace("?i")                                                  */
   103 *-* call create_csv_file
   104 *-* create_csv_file_rc = RESULT
   105 *-* high_rc = max(sdsf_routine_rc,high_rc)
   106 *-* call end_message high_rc
   107 *-* ZISPFRC = high_rc
   108 *-* address "ISPEXEC" "VPUT (ZISPFRC) SHARED"
   110 *-* return(high_rc)   /* Main Line: start_program:                                      */
   112 *-* /*                                                       */
   113 *-* alloc_csv_file:
   114 *-* current_routine = "alloc_csv_file:"
   115 *-* /* xtrc = trace("?I")                                                  */
   116 *-* parse upper arg argument
   117 *-* parse var argument csv_ddname " " remainder
   118 *-* csv_dsname = sysname ||".apflist.members.csv"
   119 *-* upper csv_dsname
   120 *-* atrk       = 15
   121 *-* alloc_parm = "MOD CATALOG REUSE TRACKS SPACE("|| atrk ||","|| atrk ||") RELEASE"
   122 *-* alloc_dcb  = "LRECL("|| csv_lrecl ||") recfm(V B)"
   123 *-* /* xtrc = trace("?I")                                                  */
   124 *-* hcenv      = address()
   125 *-* delcsv_cmd = "' DELETE ("|| userid() ||"."|| csv_dsname ||") SCR'"
   126 *-* delcsv_cmd_say = remquote(delcsv_cmd)
   127 *-* if rexxtools_available
       *-*  then
       *-*  do
   128 *-*   address "REXXTOOL"
   129 *-*   "OPTIONS MSGS"
   130 *-*   options_rc = RC
   131 *-*   if options_rc = 0
       *-*    then
       *-*    do
   132 *-*    end   /* if options_rc = 0 then do  */
   133 *-*   else
       *-*    do
   134 *-*     call check_rexxtools_hcenv_rc options_rc
   135 *-*     check_rexxtools_hcenv_rc = RESULT
   136 *-*    end   /* else do - if options_rc = 0 then do  */
   137 *-*   xmsg = msg("ON")
   138 *-*   address "IDCAMS"
   139 *-*   address_rc = RC
   140 *-*   if address_rc = 0
       *-*    then
       *-*    do
   141 *-*     interpret delcsv_cmd
   142 *-*     delcsv_cmd       = RC
   143 *-*     select   /* (1)          */
   144 *-*     when delcsv_cmd =  0
       *-*      then
       *-*      do
   145 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") delcsv_cmd_say
   146 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" csv_dsname "DELETE successf
ul."
   147 *-*       do nix = 1 to $RXTIDCMS.0
   148 *-*        say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" $RXTIDCMS.nix
   149 *-*       end   /* do nix = 1 to $RXTIDCMS.0 */
   150 *-*      end   /* if address_rc == 0 then do */
   151 *-*     when delcsv_cmd =  8
       *-*      then
       *-*      do
   152 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") delcsv_cmd_say
   153 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" csv_dsname "Not found."
   154 *-*       do nix = 1 to $RXTIDCMS.0
   155 *-*        say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" $RXTIDCMS.nix
   156 *-*       end   /* do nix = 1 to $RXTIDCMS.0 */
   157 *-*      end   /* if address_rc == 0 then do */
   158 *-*     when delcsv_cmd = 12
       *-*      then
       *-*      do
   159 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") delcsv_cmd_say
   160 *-*       say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS - Syntax error."
   161 *-*       do nix = 1 to $RXTIDCMS.0
   162 *-*        say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" $RXTIDCMS.nix
   163 *-*       end   /* do nix = 1 to $RXTIDCMS.0 */
   164 *-*      end   /* if address_rc == 0 then do */
   165 *-*     otherwise
       *-*      do
   166 *-*       do nix = 1 to $RXTIDCMS.0
   167 *-*        say display_date time() exec_name translate(format(delcsv_cmd,2,0),"0"," ") "IDCAMS -" $RXTIDCMS.nix
   168 *-*       end   /* do nix = 1 to $RXTIDCMS.0 */
   169 *-*      end   /* if address_rc == 0 then do */
   170 *-*     end   /* select (1)          */
   171 *-*    end   /* if address_rc == 0 then do */
   172 *-*   else
       *-*    do
   173 *-*     say display_date time exec_name translate(format(address_rc,2,0),"0"," ") "address 'IDCAMS' failed."
   174 *-*    end   /* if address_rc == 0 then do */
   175 *-*   address "REXXTOOL"
   176 *-*  end   /* if rexxtools_available then do */
   177 *-* else
       *-*  do
   178 *-*   address "TSO"
   179 *-*   interpret delcsv_cmd
   180 *-*   delcsv_cmd       = RC
   181 *-*  end   /* else - if rexxtools_available then do */
   182 *-* alloc_csv_cmd = "'ALLOCATE F("|| csv_ddname ||") DA("|| csv_dsname ||")" alloc_parm alloc_dcb "'"
   183 *-* isp_alloc_cmd_say = remquote(alloc_csv_cmd)
   184 *-* interpret alloc_csv_cmd
   185 *-* alloc_csv_cmd_rc = RC
   186 *-* say display_date time() exec_name translate(format(alloc_csv_cmd_rc,2,0),"0"," ") isp_alloc_cmd_say
   187 *-* if rexxtools_available
       *-*  then
       *-*  do
   188 *-*   call process_rexxtools_alloc_rc_rtn alloc_csv_cmd_rc
   189 *-*   process_rexxtools_alloc_rc_rtn_rc = RESULT
   190 *-*  end   /* if rexxtools_available then do */
   191 *-* else
       *-*  do
   192 *-*   call process_tso_alloc_rc_rtn alloc_csv_cmd_rc
   193 *-*   process_tso_alloc_rc_rtn_rc = RESULT
   194 *-*  end   /* else - if rexxtools_available then do */
   195 *-* address (hcenv)
   196 *-* xtrc = trace(xtrc) /*                                                   */
   197 *-* return(0)   /* Main Line: start_program:                                      */
   199 *-* /*                                                       */
   200 *-* check_rexxtools_hcenv_rc:
   201 *-* current_routine = "check_rexxtools_hcenv_rc:"
   202 *-* parse upper arg argument
   203 *-* parse var argument chk_options_rc " " remainder
   204 *-* select   /* (1) select                      */
   205 *-* when chk_options_rc =   0
       *-*  then
       *-*  do
   206 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Sucessful excution."
   207 *-*  end   /* when chk_options_rc = 0 then do */
   208 *-* when chk_options_rc =  -3
       *-*  then
       *-*  do
   209 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "REXXTOOL host command environment not
 found. "
   210 *-*  end   /* when chk_options_rc = 0 then do */
   211 *-* when chk_options_rc =  -4
       *-*  then
       *-*  do
   212 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Zero length command string was passed
."
   213 *-*  end   /* when chk_options_rc = 0 then do */
   214 *-* when chk_options_rc =  -5
       *-*  then
       *-*  do
   215 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Command verb not recognized.",
                                "Verify that you have sent the command to the proper host command environment."
   217 *-*  end   /* when chk_options_rc = 0 then do */
   218 *-* when chk_options_rc =  -6
       *-*  then
       *-*  do
   219 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Invalid keyword. Refer to command doc
umentation."
   220 *-*  end   /* when chk_options_rc = 0 then do */
   221 *-* when chk_options_rc =  -7
       *-*  then
       *-*  do
   222 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Syntax error.",
                 "Refer to command documentation for the correct syntax."
   224 *-*  end   /* when chk_options_rc = 0 then do */
   225 *-* otherwise
       *-*  do
   226 *-*   say display_date time() exec_name translate(format(chk_options_rc,2,0),"0"," ") "Unknown command return code."
   227 *-*  end   /* when chk_options_rc = 0 then do */
   228 *-* end   /* (1) select                      */
   229 *-* return(0)   /* Main Line: start_program:                                      */
   231 *-* /*                                                       */
   232 *-* write_csv_file:
   233 *-* current_routine = "write_csv_file:"
   234 *-* /* xtrc = trace("?i")                                                  */
   235 *-* parse upper arg argument
   236 *-* parse var argument csv_ddname " " remainder
   237 *-* hcenv = address()
   238 *-* execio_cmd = "'EXECIO * DISKW" csv_ddname "(FINIS STEM  csv_line.  '"
   239 *-* execio_cmd_say = remquote(execio_cmd)
   240 *-* interpret execio_cmd
   241 *-* execio_cmd_rc = RC
   242 *-* if execio_cmd_rc = 0
       *-*  then
       *-*  do
   243 *-*   say display_date time() exec_name translate(format(execio_cmd_rc,2,0),"0"," ") "TSOexecio" "Nr of records written:",
                                           translate(format(csv_line.0,3,0),"0"," ")
   245 *-*  end   /* if execio_cmd_rc = 0 then do  */
   246 *-* else
       *-*  do
   247 *-*   say display_date time() exec_name "TSOexecio" translate(format(execio_cmd_rc,2,0),"0"," ") "EXECIO Failed."
   248 *-*  end   /* if execio_cmd_rc = 0 then do  */
   249 *-* address (hcenv)
   250 *-* address_rc = RC
   251 *-* xtrc = trace(xtrc) /*                                                    */
   252 *-* return(0)   /* write_csv_file:                                                */
   254 *-* /*                                                       */
   255 *-* check_execio_rc:
   256 *-* current_routine = "check_execio_rc:"
   257 *-* parse upper arg argument
   258 *-* parse var argument execio_rc " " remainder
   259 *-* select   /* (1)   */
   260 *-* when execio_rc =  0
       *-*  then
       *-*  do
   261 *-*   say display_date time() exec_name "EXECIO0" translate(format(execio_rc,2,0),"0"," ") "Normal completion of requested o
peration."
   262 *-*  end   /* when execio_rc =  0 then do   */
   263 *-* when execio_rc =  1
       *-*  then
       *-*  do
   264 *-*   say display_date time() exec_name "EXECIO1" translate(format(execio_rc,2,0),"0"," ") "Data was truncated during DISKW
operation."
   265 *-*  end   /* when execio_rc =  1 then do   */
   266 *-* when execio_rc =  2
       *-*  then
       *-*  do
   267 *-*   say display_date time() exec_name "EXECIO2" translate(format(execio_rc,2,0),"0"," ") "End-of-file reached before the s
pecified number",                                       "of lines were read during a DISKR or DISKRU operation."
   269 *-*  end   /* when execio_rc =  2 then do   */
   270 *-* when execio_rc =  4
       *-*  then
       *-*  do
   271 *-*   say display_date time() exec_name "EXECIO4" translate(format(execio_rc,2,0),"0"," ") "During a DISKR or DISKRU operati
on, an empty",                                       "data set was found in a concatenation of data sets. The file was not successf
ully opened and",                                       "no data was returned."
   274 *-*  end   /* when execio_rc =  4 then do   */
   275 *-* when execio_rc = 20
       *-*  then
       *-*  do
   276 *-*   say display_date time() exec_name "EXECIO20" translate(format(execio_rc,2,0),"0"," ") "Severe error. EXECIO completed
unsuccessfully",                                       "and a message is issued."
   278 *-*  end   /* when execio_rc = 20 then do   */
   279 *-* otherwise
       *-*  do
   280 *-*   say display_date time() exec_name "EXECIOX0" translate(format(execio_rc,2,0),"0"," ") "Unknown error rc."
   281 *-*  end   /* otherwise do                  */
   282 *-* end   /* (1)   */
   283 *-* return(0)   /* Main Line: start_program:                                      */
   285 *-* /*                                                       */
   286 *-* free_csv_file:
   287 *-* current_routine = "free_csv_file:"
   288 *-* parse upper arg argument
   289 *-* parse var argument csv_ddname " " remainder
   290 *-* free_cmd = "'FREE F("|| csv_ddname ||")'"
   291 *-* free_cmd_say = remquote(free_cmd)
   292 *-* interpret free_cmd
   293 *-* free_cmd_rc = RC
   294 *-* if free_cmd_rc = 0
       *-*  then
       *-*  do
   295 *-*   say display_date time() exec_name translate(format(free_cmd_rc,2,0),"0"," ") "FREE Successful."
   296 *-*  end   /* free_cmd_rc                                                       */
   297 *-* else
       *-*  do
   298 *-*   say display_date time() exec_name translate(format(free_cmd_rc,2,0),"0"," ") "FREE Failed."
   299 *-*  end   /* free_cmd_rc                                                       */
   300 *-* return(0)   /* Main Line: start_program:                                      */
   302 *-* /*                                                       */
   303 *-* create_csv_file:
   304 *-* current_routine = "write_csv_file:"
   305 *-* csv_ddname = "CSVFILE"
   306 *-* call alloc_csv_file  csv_ddname
   307 *-* alloc_csv_file_rc = RESULT
   308 *-* call write_csv_file  csv_ddname
   309 *-* write_csv_file_rc = RESULT
   310 *-* call free_csv_file   csv_ddname
   311 *-* free_csv_file_rc  = RESULT
   312 *-* return(0)   /* Main Line: start_program:                                      */
   314 *-* /*                                                       */
   315 *-* set_variables:
   316 *-* current_routine = "set_variables:"
   317 *-* squote         = "'"
   318 *-* dquote         = '"'
   319 *-* comma          = ','
   320 *-* period         = '.'
   321 *-* entity         = substr(sysname,1,4)
   322 *-* dis_proc       = substr(exec_name,1,4)
   323 *-* int_time       = time()
   324 *-* display_time   = translate(int_time,".",":")
   325 *-* dis_date       = "D"|| symd_sldate
   326 *-* dis_time       = "T"|| substr(int_time,1,2) || substr(int_time,4,2) || substr(int_time,7,2)
   327 *-* file_array.    = ""
   328 *-* empty_library  = 0
   329 *-* file_array.0   = 1
   330 *-* newix          = 1
   331 *-* open_flag      = 0
   332 *-* lmmlist_pass   = 0
   333 *-* mbrname        = ""
   334 *-* mbr_count      = 0
   335 *-* mbr_auth_count = 0
   336 *-* librow         = 0
   337 *-* mbrlist.       = ""
   338 *-* csv_lineix     = 0
   339 *-* csv_lrecl      = 0
   340 *-* high_rc        = 0
   341 *-* return(0)   /* set_variables:                                                        */
   343 *-* /*                                                       */
   344 *-* process_alloc_rtn:
   345 *-* current_routine = "process_alloc_rtn:"
   346 *-* parse upper arg argument
   347 *-* parse var argument ddname ' ' remainder
   348 *-* if   rexxtool_available
       *-*  then
       *-*  do
   349 *-*   process_rexxtools_alloc_rtn_rc = 99
   350 *-*   call process_rexxtools_alloc_rtn ddname
   351 *-*   process_rexxtools_alloc_rc_rtn_rc = RESULT
   352 *-*  end
   353 *-* alloc_rc = max(process_tso_alloc_rc_rtn_rc,process_rexxtools_alloc_rtn_rc,high_rc)
   354 *-* return(alloc_rc)   /* process_alloc_rtn:                                                    */
   356 *-* /*                                                       */
   357 *-* process_free_rtn:
   358 *-* current_routine = "process_free_rtn:"
   359 *-* parse upper arg argument
   360 *-* parse var argument ddname ' ' remainder
   361 *-* if   rexxtool_available
       *-*  then
       *-*  do
   362 *-*   process_rexxtools_free_rtn_rc = 99
   363 *-*   call process_rexxtools_free_rtn ddname
   364 *-*   process_rexxtools_free_rtn_rc = RESULT
   365 *-*  end
   366 *-* free_rc = max(process_tso_free_rc_rtn_rc,process_rexxtools_free_rtn_rc,high_rc)
   367 *-* return(free_rc)   /* process_free_rtn:                                                     */
   369 *-* /*                                                       */
   370 *-* process_rexxtools_free_rtn:
   371 *-* current_routine = "process_rexxtools_free_rtn:"
   372 *-* parse upper arg argument
   373 *-* parse var argument ddname ' ' remainder
   374 *-* hcenv = address()
   375 *-* address "REXXTOOLS"
   376 *-* address_rc = RC
   377 *-* free_cmd = "'FREE F("|| ddname ||")'"
   378 *-* free_cmd_rc = RC
   379 *-* address (hcenv)
   380 *-* address_rc = RC
   381 *-* free_rc = max(free_cmd_rc,high_rc)
   382 *-* return(free_rc)   /* process_free_rtn:                                                     */
   384 *-* /*                                                       */
   385 *-* process_tso_free_rtn:
   386 *-* current_routine = "process_rexxtools_free_rtn:"
   387 *-* parse upper arg argument
   388 *-* parse var argument ddname ' ' remainder
   389 *-* hcenv = address()
   390 *-* address "TSO"
   391 *-* address_rc = RC
   392 *-* free_cmd = "'FREE F("|| ddname ||")'"
   393 *-* free_cmd_rc = RC
   394 *-* address (hcenv)
   395 *-* address_rc = RC
   396 *-* free_rc = max(free_cmd_rc,high_rc)
   397 *-* return(free_rc)   /* process_free_rtn:                                                     */
   399 *-* /*                                                       */
   400 *-* process_tso_alloc_rc_rtn:
   401 *-* current_routine = "process_tso_alloc_rc_rtn:"
   402 *-* parse upper arg argument
   403 *-* parse var argument alloc_cmd_rc ' ' remainder
   404 *-* high_rc     = max(alloc_cmd_rc,high_rc)
   405 *-* msg_header  = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   406 *-* l_msg_header  = length(msg_header)
   407 *-* select /* (1) alloc_cmd_rc */
   408 *-* when alloc_cmd_rc =  0
       *-*  then
       *-*  do
   409 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   410 *-*   say msg_header "TSOCMDA1" cmd_string
   411 *-*  end   /* when alloc_cmd_rc =  0 then do    */
   412 *-* when alloc_cmd_rc =  4
       *-*  then
       *-*  do
   413 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   414 *-*   say msg_header "TSOCMDA2" cmd_string
   415 *-*  end   /* when alloc_cmd_rc =  4 then do    */
   416 *-* when alloc_cmd_rc = 12
       *-*  then
       *-*  do
   417 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   418 *-*   say msg_header "TSOCMDA3" cmd_string
   419 *-*   do lix = 1 to alloc_msgs.0
   420 *-*    /*   say left("",l_msg_header," ") "==>" alloc_msgs.lix       */
   421 *-*   end   /* do lix = 1 to delete_msgs.0     */
   422 *-*   high_rc = max(alloc_cmd_rc,high_rc)
   423 *-*   signal error_exit_rtn
   424 *-*  end   /* when alloc_cmd_rc = 12 then do  */
   425 *-* otherwise
       *-*  do
   426 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   427 *-*   say msg_header "TSOCMDA4" cmd_string
   428 *-*   high_rc = max(alloc_cmd_rc,high_rc)
   429 *-*   signal error_exit_rtn
   430 *-*  end   /* otherwise do              */
   431 *-* end   /* select - (1) alloc_cmd_rc */
   432 *-* return(0)   /* process_tso_alloc_rc_rtn:                                                               */
   434 *-* /*                                                       */
   435 *-* process_rexxtools_alloc_rc_rtn:
   436 *-* current_routine = "process_rexxtools_alloc_rc_rtn:"
   437 *-* /* xtrc = trace("?I")                                                                       */
   438 *-* parse upper arg argument
   439 *-* parse var argument alloc_cmd_rc ' ' remainder
   440 *-* high_rc         = max(alloc_cmd_rc,high_rc)
   441 *-* msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   442 *-* l_msg_header    = length(msg_header)
   443 *-* select /* (1) alloc_cmd_rc */
   444 *-* when alloc_cmd_rc =  0
       *-*  then
       *-*  do
   445 *-*   cmd_string = left(isp_alloc_cmd_say,(linesize()-(l_msg_header+20)))
   446 *-*   say msg_header "REXXTLA1" cmd_string
   447 *-*  end   /* when alloc_cmd_rc =  0 then do    */
   448 *-* when alloc_cmd_rc =  4
       *-*  then
       *-*  do
   449 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   450 *-*   say msg_header "REXXTLA2" cmd_string
   451 *-*   rc_04_msg = "The error was due to the unavailability of a resource, a problem with the current environment, or a routi
ne failure.",                 "The S99INFO variable will contain additional information."
   453 *-*   say msg_header "REXXTLAE" rc_04_msg
   454 *-*   say msg_header "S99INFO:" S99INFO "S99ERROR:" S99ERROR
   455 *-*  end   /* when alloc_cmd_rc =  4 then do    */
   456 *-* when alloc_cmd_rc =  8
       *-*  then
       *-*  do
   457 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   458 *-*   say msg_header "REXXTLA3" cmd_string
   459 *-*   rc_08_msg = "An installation routine denied the request."
   460 *-*   say msg_header "REXXTLAE" rc_08_msg
   461 *-*   high_rc = max(alloc_cmd_rc,high_rc)
   462 *-*   signal error_exit_rtn
   463 *-*  end   /* when alloc_cmd_rc =  8 then do    */
   464 *-* when alloc_cmd_rc = 12
       *-*  then
       *-*  do
   465 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   466 *-*   say msg_header "REXXTLA4" cmd_string
   467 *-*   do lix = 1 to alloc_msgs.0
   468 *-*    /*   say left("",l_msg_header," ") "==>" alloc_msgs.lix       */
   469 *-*   end   /* do lix = 1 to delete_msgs.0     */
   470 *-*   rc_12_msg = "Invalid parameter list error. This error can occur when you specify keywords that are mutually exclusive"
,                             "or when a required keyword is missing."
   472 *-*   say msg_header "REXXTLAE" rc_12_msg
   473 *-*   high_rc = max(alloc_cmd_rc,high_rc)
   474 *-*   signal error_exit_rtn
   475 *-*  end   /* when alloc_cmd_rc = 12 then do  */
   476 *-* otherwise
       *-*  do
   477 *-*   cmd_string = left('"'|| isp_alloc_cmd_say ||'"',(linesize()-(l_msg_header+20)))
   478 *-*   say msg_header "REXXTLA5" cmd_string
   479 *-*   high_rc = max(alloc_cmd_rc,high_rc)
   480 *-*   signal error_exit_rtn
   481 *-*  end   /* otherwise do              */
   482 *-* end   /* select - (1) alloc_cmd_rc */
   483 *-* high_rc = max(alloc_cmd_rc,high_rc)
   484 *-* xtrc = trace(xtrc) /*                                                                    */
   485 *-* return(high_rc)   /* process_rexxtools_alloc_rc_rtn:                                                         */
   487 *-* /*                                                       */
   488 *-* process_rexxtools_free_rc_rtn:
   489 *-* current_routine = "process_rexxtools_free_rc_rtn:"
   490 *-* parse upper arg argument
   491 *-* parse var argument free_cmd_rc ' ' remainder
   492 *-* high_rc         = max(free_cmd_rc,high_rc)
   493 *-* msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   494 *-* l_msg_header    = length(msg_header)
   495 *-* select /* (1) free_cmd_rc */
   496 *-* when free_cmd_rc =  0
       *-*  then
       *-*  do
   497 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   498 *-*   say msg_header "REXXTLF1" cmd_string
   499 *-*  end   /* when free_cmd_rc =   0 then do    */
   500 *-* when free_cmd_rc =  4
       *-*  then
       *-*  do
   501 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   502 *-*   say msg_header "REXXTLF2" cmd_string
   503 *-*  end   /* when free_cmd_rc =   4 then do    */
   504 *-* when free_cmd_rc =  8
       *-*  then
       *-*  do
   505 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   506 *-*   say msg_header "REXXTLF3" cmd_string
   507 *-*  end   /* when free_cmd_rc =   8 then do    */
   508 *-* when free_cmd_rc = 12
       *-*  then
       *-*  do
   509 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   510 *-*   say msg_header "REXXTLF4" cmd_string
   511 *-*   do lix = 1 to free_msgs.0
   512 *-*    /*   say left("",l_msg_header," ") "==>" free_msgs.lix        */
   513 *-*   end   /* do lix = 1 to delete_msgs.0     */
   514 *-*   high_rc = max(free_cmd_rc,high_rc)
   515 *-*   signal error_exit_rtn
   516 *-*  end   /* when free_cmd_rc = 12 then do   */
   517 *-* otherwise
       *-*  do
   518 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   519 *-*   say msg_header "REXXTLF5" cmd_string
   520 *-*   high_rc = max(free_cmd_rc,high_rc)
   521 *-*   signal error_exit_rtn
   522 *-*  end   /* otherwise do              */
   523 *-* end   /* select - (1) free_cmd_rc */
   524 *-* return(0)   /* process_rexxtools_free_rc_rtn:                                                          */
   526 *-* /*                                                       */
   527 *-* process_tso_free_rc_rtn:
   528 *-* current_routine = "process_tso_free_rc_rtn:"
   529 *-* parse upper arg argument
   530 *-* parse var argument free_cmd_rc ' ' remainder
   531 *-* high_rc         = max(free_cmd_rc,high_rc)
   532 *-* msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   533 *-* l_msg_header    = length(msg_header)
   534 *-* select /* (1) free_cmd_rc */
   535 *-* when free_cmd_rc =   0
       *-*  then
       *-*  do
   536 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   537 *-*   say msg_header "TSOCMDF1" cmd_string
   538 *-*  end   /* when free_cmd_rc =   0 then do    */
   539 *-* when free_cmd_rc =   4
       *-*  then
       *-*  do
   540 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   541 *-*   say msg_header "TSOCMDF2" cmd_string
   542 *-*  end   /* when free_cmd_rc =   4 then do    */
   543 *-* when free_cmd_rc =   8
       *-*  then
       *-*  do
   544 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   545 *-*   say msg_header "TSOCMDF3" cmd_string
   546 *-*  end   /* when free_cmd_rc =   8 then do    */
   547 *-* when free_cmd_rc = 12
       *-*  then
       *-*  do
   548 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   549 *-*   say msg_header "TSOCMDF4" cmd_string
   550 *-*   do lix = 1 to free_msgs.0
   551 *-*    /*   say left("",l_msg_header," ") "==>" free_msgs.lix        */
   552 *-*   end   /* do lix = 1 to delete_msgs.0       */
   553 *-*   high_rc = max(free_cmd_rc,high_rc)
   554 *-*   signal error_exit_rtn
   555 *-*  end   /* when free_cmd_rc = 12 then do     */
   556 *-* otherwise
       *-*  do
   557 *-*   cmd_string = left(isp_free_cmd_say,(linesize()-(l_msg_header+20)))
   558 *-*   say msg_header "TSOCMDF5" cmd_string
   559 *-*   high_rc = max(free_cmd_rc,high_rc)
   560 *-*   signal error_exit_rtn
   561 *-*  end   /* otherwise do              */
   562 *-* end   /* select - (1) free_cmd_rc */
   563 *-* return(free_cmd_rc)   /* process_tso_free_rc_rtn:        */
   565 *-* /*                                                       */
   566 *-* dummy_rtn:
       *-* /* for now  */
   567 *-* current_routine = "dummy_rtn:"
   568 *-* /* "S99ERROR - An error reason code in printable hexadecimal format."
 */
   569 *-* /* "S99INFO  - An error information code in printable hexadecimal format."
 */
   570 *-* /* "S99ERSN  - An SMS reason code in printable hexadecimal format."
 */
   571 *-* /* "S99DDN   - The ddname used for the allocation."
 */
   572 *-* /* "S99DSN   - The data set name used for the allocation."
 */
   573 *-* /* "S99MSG.  - An array that contains dynamic allocation messages."
 */
   574 *-* /* "OPTIONS  NOMSGS is in effect. The severity level of the messages returned is controlled by the MSGLEVEL keyword."
 */
   575 *-* return(0)   /* dummy_rtn:                                                                              */
   577 *-* /*                                                       */
   578 *-* free_dsn:
   579 *-* current_routine = "free_dsn:"
   580 *-* /* say "free_dsn:"                                     */
   581 *-* xmsg = MSG("OFF")
   582 *-* address "TSO"
   583 *-* free_cmd = "'FREE F("|| listdd ||")'"
   584 *-* interpret free_cmd
   585 *-* free_cmd_rc = RC
   586 *-* if (free_cmd_rc <> 12) & (free_cmd_rc <> 0)
       *-*  then
       *-*  do
   587 *-*   say display_date time() exec_name translate(format(free_cmd_rc,2,0),"0"," ") "TSO998W" free_cmd
   588 *-*   say msg_header "TSO998W " cmd_string
   589 *-*  end   /* if (free_cmd_rc <> 12) | (free_cmd_rc = 0) then do  */
   590 *-* xmsg = MSG(xmsg)
   591 *-* return(0)   /* free_dsn:                                             */
   593 *-* /***************************************************************         *
                         * NAME =                                                                *   msgrtn
                                      *                                                                       * FUNCTION =
                                                   *   List all messages in the isfmsg and isfmsg2. variables              *
                                                                * INPUT =
     *   req - Request being processed                                       *
                  * EXPOSED VARIABLES =                                                   *   isfmsg                        - Short
 message                       *   isfmsg2.                      - Numbered messages                   *   rexxtools_available
      -                                     *   xtrc                          -                                     *   xmsg
                   - *   verbose                       - *   debug                         - *   display_date                  - *
  exec_name                     - *   squote                        -                                     *   dquote
         - *   comma                         - *   period                        - *   open_flag                     - * ----------
--------------------------------------------------- *   process_tso_alloc_rc          -                                     *   pro
cess_rexxtool_alloc_rc     -                                     *
      * OUTPUT =                                                              *   Messages written to terminal
                   *                                                                       ****************************************
***********************/
   628 *-* msgrtn:
       *-* Procedure expose xtrc xmsg verbose debug isfmsg isfmsg2. display_date exec_name high_rc,                         squote
dquote comma period verbose new_list. open_flag csv_lineix csv_line. csv_line.0 csv_lrecl
   630 *-* Arg req
   631 *-* current_routine = "msgrtn:"
   632 *-* /*---------------------------*/
   633 *-* /* Process numbered messages */
   634 *-* /*---------------------------*/
   635 *-* /* EXPOSED VARIABLES =                                      */
   636 *-* /*                                                          */
   637 *-* /* verbose debug isfmsg isfmsg2. display_date exec_name,    */
   638 *-* /* squote dquote comma period                               */
   639 *-* /*                                                          */
   640 *-* /* Say "** Numbered messages associated with" req "follow ..*/
   641 *-* msg_header   = display_date time() exec_name
   642 *-* l_msg_header = length(msg_header)
   643 *-* if (verbose = "VERBOSE") & (debug = "DEBUG")
       *-*  then
       *-*  do
   644 *-*   do ix = 1 to isfmsg2.0
   645 *-*    say msg_header "   MSG1:" isfmsg2.ix
   646 *-*   end   /* do ix = 1 to isfmsg2.0          */
   647 *-*   /*                                     */
   648 *-*  end   /* if verbose = "VERBOSE" then do  */
   650 *-* if isfmsg <> ""
       *-*  then
       *-*  do    /* If short message present */
   651 *-*   say msg_header "   MSG2:" "** Short message associated with the request is:" isfmsg
   652 *-*   /*                                     */
   653 *-*  end   /* if isfmsg <> "" then do         */
   655 *-* return(0)   /* msgrtn: Procedure expose verbose debug isfmsg isfmsg2. display_date exec_name,   */
   658 *-* /***************************************************************         *
                         * NAME =                                                                *   process_columns_rtn
                                      *                                                                       * FUNCTION =
                                                   *   List all rows and their column values                               *
                                                                * INPUT =
     *   numrows - number of rows to process                                 *   pfx     - column variable prefix or "." if none
                  *   ocols   - word delimited column names to process                    *
                               * EXPOSED VARIABLES =                                                   *   None
                                            *                                                                       * OUTPUT =
                                                         *   Responses written to terminal                                       *
                                                                      *************************************************************
**/
   679 *-* /*                                                                                            */
   680 *-* process_columns_rtn:
   681 *-* current_routine = "process_columns_rtn:"
   682 *-* Arg numrows pfx ocols
   683 *-* msg_header   = display_date time() exec_name
   684 *-* l_msg_header = length(msg_header)
   685 *-* say msg_header "PROCOL00"    "   Number of rows to process for" list_name ": " numrows
   686 *-* l_record     = 0
   687 *-* l_max        = 0
   688 *-* l_temp       = 0
   689 *-* file_record  = ""
   690 *-* first_record = ""
   692 *-* Column1      = "HRDWARE"
   693 *-* Column2      = "UPDATEDATE"
   694 *-* Column3      = "UPDATETIME"
   695 *-* columns      = ocols
   696 *-* sdsf_columns = ""
   697 *-* first_time   = 1
   698 *-* /* say "first_time set" first_time */
   699 *-* do col_ix = 1 to words(ocols)
   700 *-*  sdsf_columns = sdsf_columns || word(columns,col_ix) ||'","'
   701 *-* end
   702 *-* first_record = first_record ||'"'|| Column1 ||'","'|| Column2 ||'","'|| Column3 ||'","'|| sdsf_columns
   703 *-* first_record = delstr(first_record,length(first_record)-1,2)
   704 *-* do row_ix = 1 to numrows          /* Loop for all rows */
   705 *-*  call process_rows_rtn
   706 *-* end   /* do row_ix=1 to numrows */
   707 *-* do row_ix = 1 to numrows          /* Loop for all rows */
   708 *-*  call process_apf_dataset
   709 *-* end   /* do row_ix = 1 to numrows */
   710 *-* return(0)   /* process_columns_rtn:                                */
   712 *-* /*                                                                                            */
   713 *-* process_apf_dataset:
   714 *-* current_routine = "process_apf_dataset:"
   715 *-* /* xtrc = trace("?I")            DSNAME "SYS1.LINKLIB"                 */
   716 *-* do row_ix = 1 to numrows
   717 *-*  do col_ix = 1 to numcols
   718 *-*   if word(new_list.row_ix.col_ix,1) = "DSNAME"
       *-*    then
       *-*    do
   719 *-*     apf_data_set = word(new_list.row_ix.col_ix,2)
   720 *-*     call process_apf_data_set apf_data_set
   721 *-*     process_apf_data_set_rc = RESULT
   722 *-*    end   /* if word(new_list.row_ix.col_ix,1) = "DSNAME" then do                           */
   723 *-*   empty_library  = 0
   724 *-*  end   /* do col_ix = 1 to numcols                                                         */
   725 *-* end   /* do col_ix = 1 to numcols                                                         */
   726 *-* xtrc = trace(xtrc) /*                                               */
   727 *-* return(0)   /* process_apf_dataset:                                        */
   729 *-* /*                                                                                            */
   730 *-* process_rows_rtn:
   731 *-* current_routine = "process_rows_rtn:"
   732 *-* /* xtrc = trace("?I")                                                  */
   733 *-* numcols = words(ocols)
   734 *-* do col_ix = 1 to numcols /* Loop for all columns */
   735 *-*  call process_cols_rtn
   736 *-*  process_cols_rtn_rc = RESULT
   737 *-* end   /* do col_ix=1 to words(ocols) */
   738 *-* /* xtrc = trace(xtrc)                                                  */
   739 *-* return(0)   /* process_rows_rtn:                                           */
   741 *-* /*                                                                                            */
   742 *-* process_cols_rtn:
   743 *-* current_routine = "process_cols_rtn:"
   744 *-* /* say current_routine                                                                      */
   745 *-* /* xtrc = trace("?I")                                                  */
   746 *-* if pfx = "."
       *-*  then
       *-*  do        /* If no prefix */
   747 *-*   pfx  = ""
   748 *-*  end   /* if pfx="." then do  */
   749 *-* variable   = pfx || word(ocols,col_ix) ||"."|| row_ix
   750 *-* varpos     = pos(".",variable) - 1
   751 *-* interpret "varstem  = substr(variable,1,varpos)"
   752 *-* interpret "varvalue = value(variable)"
   753 *-* if varstem <> "TOKEN"
       *-*  then
       *-*  do                 /* skip the token column     */
   754 *-*   call process_field_rtn
   755 *-*  end   /* if varstem <> "TOKEN" then do */
   756 *-* else
       *-*  do   /*varstem == "TOKEN"    */
   757 *-*   nop
   758 *-*  end   /* else do varstem == "TOKEN"    */
   759 *-* xtrc = trace(xtrc) /*                                               */
   760 *-* return(0)   /* process_cols_rtn:                                           */
   762 *-* /*                                                                                            */
   763 *-* process_apf_data_set:
       *-* procedure expose mbrname mbr_count mbr_auth_count xtrc row_ix col_ix,                                           open_fla
g apf_data_set lmmlist_pass xmsg high_rc,                                       trace_option rexxtools_available member name,
                                 exec_name display_date squote csv_lineix csv_line. csv_line.0 csv_lrecl
   767 *-* /* xtrc = trace("?I")                                                  */
   768 *-* parse upper arg argument
   769 *-* current_routine = "process_apf_data_set:"
   770 *-* apf_data_set    = word(argument,1)
   771 *-* /* say current_routine "-" row_ix "-" apf_data_set                                        */
   772 *-* call isp_alloc_rtn apf_data_set                                              /* Allocate APF library data set
                */
   773 *-* isp_alloc_rtn_rc = RESULT
   774 *-* if isp_alloc_rtn_rc = 0
       *-*  then
       *-*  do
   775 *-*   call isp_lminit_rtn apf_data_set                                           /* ISPEXEC LMINIT APF library data set
                */
   776 *-*   isp_lminit_rtn_rc = RESULT
   777 *-*   if isp_lminit_rtn_rc = 0
       *-*    then
       *-*    do
   778 *-*     call isp_lmopen_rtn                                                      /* ISPEXEC LMOPEN APF library data set
                */
   779 *-*     isp_lmopen_rtn_rc = RESULT
   780 *-*     if isp_lmopen_rtn_rc = 0
       *-*      then
       *-*      do
   781 *-*       call isp_lmmlist_rtn ispapfid "LIST"                                   /* ISPEXEC LMMLIST LIST APF library data se
t   (initial)   */
   782 *-*       isp_lmmlist_rtn_rc = RESULT
   783 *-*       /*          MBRNAME ZLTTR ZLAC ZLALIAS ZLSIZE ZLRMODE ZLAMODE ZLATTR ZLSSI  */
   784 *-*       librow_cols = "MBRNAME ZLTTR ZLAC ZLALIAS ZLSIZE ZLAMODE ZLRMODE ZLATTR ZLSSI"
   785 *-*       Subtitle_librow_cols = librow_cols
   786 *-*       do while (isp_lmmlist_rtn_rc = 0)
   787 *-*        librow = librow + 1
   788 *-*        libcols     = words(librow_cols)
   789 *-*        do libcol = 1 to libcols
   790 *-*         interpret "mbrlist.librow.libcol =" word(librow_cols,libcol)
   791 *-*         /* mbrname zlac zlalias zlamode zlrmode zlattr zlttr zlsize zlssi */
   792 *-*        end   /* do libcol = 1 to libcols      */
   793 *-*        librow_fields = MBRNAME ZLTTR ZLAC ZLALIAS ZLSIZE ZLAMODE ZLRMODE ZLATTR ZLSSI
   794 *-*        /* xtrc = trace("?I")                                            */
   795 *-*        call isp_lmmlist_rtn ispapfid "LIST"                                 /* ISPEXEC LMMLIST LIST APF library data set
               */
   796 *-*        isp_lmmlist_rtn_rc = RESULT
   797 *-*       end   /* do while (isp_lmmlist_rtn_rc = 0)                 */
   798 *-*       /* xtrcr = trace("R")                                           */
   799 *-*       /* call isp_lmmlist_rtn ispapfid "FREE"                       */          /* ISPEXEC LMMLIST LIST APF library data
 set   (initial)   */
   800 *-*       /*  isp_lmmlist_rtn_rc = RESULT                               */
   801 *-*      end   /* if isp_lmopen_rtn_rc = 0 then do                  */
   802 *-*     call isp_lmclose_rtn ispapfid
   803 *-*     isp_lmclose_rtn_rc = RESULT
   804 *-*    end   /* if isp_lmopen_rtn_rc = 0 then do                  */
   805 *-*   call isp_free_rtn ispapfid
   806 *-*   isp_free_rtn_rc = RESULT
   807 *-*  end   /* if isp_alloc_rtn_rc = 0 then do  */
   808 *-*  /* say apf_data_set mbr_count mbr_auth_count                         */
   809 *-* call format_result_line apf_data_set mbr_count mbr_auth_count
   810 *-* mbrname = left(" ",8)
   811 *-* apf_data_set   = 0
   812 *-* mbr_count      = 0
   813 *-* mbr_auth_count = 0
   814 *-* xtrc = trace(xtrc) /*                                               */
   815 *-* return(0)   /* process_apf_data_set: procedure                           */
   817 *-* /*                                                                         */
   818 *-* format_result_line:
   819 *-* previous_routine =current_routine
   820 *-* current_routine = "format_result_line:"
   821 *-* hcenv = address()
   822 *-* /* xtrc = trace("?I")                                                */
   823 *-* parse arg argument
   824 *-* parse var argument o_apf_data_set " " o_mbr_count " " o_mbr_auth_count
   825 *-* msg_id = "ISPAPFF0"
   826 *-* if rexxtools_available
       *-*  then
       *-*  do
   827 *-*   address "REXXTOOL"
   828 *-*   message_line = msg_id left(o_apf_data_set,44) d2pic(o_mbr_count,"zzz,zz9"),
         d2pic(o_mbr_auth_count,"zzz,zz9")
   830 *-*  end   /* if rexxtools_available then do                                  */
   831 *-* else
       *-*  do
   832 *-*   address "TSO"
   833 *-*   message_line = msg_id left(o_apf_data_set,44) o_mbr_count,                                                  o_mbr_auth
_count
   835 *-*  end   /* elsed do - if rexxtools_available then do                       */
   836 *-* /* say message_line                                                    */
   837 *-* /* xtrc = trace("?I")                                                  */
   838 *-* csv_line_new = left(o_apf_data_set,44) || translate(right(o_mbr_count,10),"0"," ") ||,
                translate(right(o_mbr_auth_count,10),"0"," ")
   840 *-* csv_line_new = translate(csv_line_new,"00"x," ")
   841 *-* call add_line_to_csv csv_lineix csv_line_new
   842 *-* add_line_to_csv_rc = RESULT
   843 *-* xtrc = trace(xtrc) /*                                               */
   844 *-* address (hcenv)
   845 *-* return(0)   /* format_result_line:                                         */
   847 *-* /*                                                                           */
   848 *-* add_line_to_csv:
   849 *-* current_routine = "add_line_to_csv:"
   850 *-* /* xtrc = trace("?I")                                                  */
   851 *-* parse upper arg argument
   852 *-* parse var argument csv_lineix " " line " " remainder
   853 *-* line = translate(line," ","00"x)
   854 *-* csv_lineix = csv_lineix + 1
   855 *-* csv_line.csv_lineix = line
   856 *-* if csv_lrecl < length(line)
       *-*  then
       *-*  do
   857 *-*   csv_lrecl = length(line) + 4
   858 *-*  end   /* if csv_lrecl > length(line) then do */
   859 *-* csv_line.0          = csv_lineix
   860 *-* xtrc = trace(xtrc) /*                                               */
   861 *-* return(0)   /* format_result_line:                                         */
   863 *-* /*                                                                           */
   864 *-* process_field_rtn:
   865 *-* current_routine = "process_field_rtn:"
   866 *-* newix  = file_array.0
   867 *-* first_time = 0
   868 *-* /* say "call process_record_rtn " database newix file_array.0 */
   869 *-* call process_record_rtn
   870 *-* parse var varvalue '"' newvalue '",' remainder
   871 *-* new_list.row_ix.col_ix = varstem ||" "|| newvalue ||" "
   872 *-* new_list.0.0 = col_ix
   873 *-* new_list.0   = row_ix
   874 *-* /* say varstem varvalue row_ix col_ix new_list.row_ix.col_ix             */
   875 *-* /* xtrc = trace(xtrc)                                                  */
   876 *-* return(0)   /* process_field_rtn: */
   878 *-* /*                                                                           */
   879 *-* process_record_rtn:
   880 *-* current_routine = "process_record_rtn:"
   881 *-* /* say "process_record_rtn:" file_array.0                                             */
   882 *-* /* xtrc = trace("?I")                                                  */
   883 *-* /*   */
   884 *-* if ((varstem = "CRDATE")     |,                                      (varstem = "REFDATE"))
   885 *-*  then
       *-*  do
   886 *-*   call process_text
   887 *-*  end   /* if ((varstem = "CRDATE") | (varstem = "REFDATE")) then do     */
   888 *-* else
       *-*  do
   889 *-*   if (datatype(varvalue,"NUM"))
       *-*    then
       *-*    do
   890 *-*     call process_nums
   891 *-*    end   /* if (datatype(varvalue,"NUM"))  then do  */
   892 *-*   else
       *-*    do
   893 *-*     call process_text
   894 *-*    end   /* else do  if (datatype(varvalue,"NUM"))  then do  */
   895 *-*  end   /* else do  - if ((varstem = "CRDATE") | (varstem = "REFDATE")) then do */
   896 *-* if substr(file_record,length(file_record),1) = dquote
       *-*  then
       *-*  do
   897 *-*   varvalue    = varvalue ||'",'
   898 *-*  end   /* if substr(file_record,length(file_record),1) = '"' then do    */
   899 *-* else
       *-*  do
   900 *-*   if substr(file_record,length(file_record),1) = comma
       *-*    then
       *-*    do
   901 *-*     nop
   902 *-*    end   /* if substr(file_record,length(file_record),1) = '"' then do  */
   903 *-*  end   /* else do - if substr(file_record,length(file_record),1) = dquote then do */
   904 *-* /* xtrc = trace(xtrc)                                                  */
   905 *-* return(0)   /* process_record_rtn:                                       */
   907 *-* /*                                                                                 */
   908 *-* process_nums:
   909 *-* current_routine = "process_nums:"
   910 *-* /* say current_routine                                                             */
   911 *-* /* xtrc = trace("?I")                                                  */
   912 *-* /* xtrc = trace("O")                                                   */
   913 *-* varvalue    =  varvalue ||','
   914 *-* file_record = file_record || varvalue
   915 *-* /* xtrc = trace(xtrc)                                                          */
   916 *-* return(0)   /* process_nums:    */
   918 *-* /*                                                                                 */
   919 *-* process_text:
   920 *-* current_routine = "process_text:"
   921 *-* /* say current_routine                                                               */
   922 *-* /*  */
   923 *-* /* xtrc = trace("?I")                                                  */
   924 *-* if length(varvalue) > 0
       *-*  then
       *-*  do
   925 *-*   varvalue    = '"'|| varvalue ||'",'
   926 *-*  end   /* if length(varvalue) > 0 then do  */
   927 *-* else
       *-*  do
   928 *-*   varvalue    = '" ",'
   929 *-*  end   /* if length(varvalue) > 0 then do  */
   930 *-* file_record = file_record || varvalue
   931 *-* /* xtrc = trace(xtrc)                                                          */
   932 *-* return(0)   /* process_text:    */
   934 *-* /*                                                                                 */
   935 *-* isp_lmmlist_rtn:
   936 *-* /* xtrc = trace("?I")                                                  */
   937 *-* previous_routine = current_routine
   938 *-* current_routine = "isp_lmmlist_rtn:"
   939 *-* /* say current_routine                                                   */
   940 *-* /* xtrc = trace("O")                                                   */
   941 *-* parse upper arg argument
   942 *-* parse var argument ispapfid ' ' lmmlist_option ' ' remainder
   943 *-* if lmmlist_pass = 0
       *-*  then
       *-*  do
   944 *-*   mbrname       = left(" ",8)
   945 *-*   lmmlist_pass  = lmmlist_pass + 1
   946 *-*  end   /* if lmmlist_pass = 0 then do                                     */
   947 *-*  /* say argument ' - ' ispapfid ' ' lmmlist_option                        */
   948 *-* msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   949 *-* l_msg_header    = length(l_msg_header)
   950 *-* hcenv = address()
   951 *-* address "ISPEXEC"
   952 *-* if (lmmlist_option   = "LIST"),     | (lmmlist_option = "FREE"),
   954 *-*  then
       *-*  do
   955 *-*   lmmlist_cmd     = "'LMMLIST DATAID("|| ispapfid ||") OPTION("|| lmmlist_option ||")",                            " STA
TS(YES) MEMBER(MBRNAME)'"
   957 *-*   lmmlist_cmd_say = remquote(lmmlist_cmd)
   958 *-*   interpret lmmlist_cmd
   959 *-*   lmmlist_cmd_rc = RC
   960 *-*   if lmmlist_cmd_rc = 0
       *-*    then
       *-*    do
   961 *-*     msg_id           = "ISPLMM00"
   962 *-*     msg_text         = lmmlist_cmd_say "Member("|| mbrname ||") AC("|| zlac ||")"
   963 *-*     call print_trace_line
   964 *-*     print_trace_line_rc = RESULT
   965 *-*    end   /* if lmmlist_cmd_rc = 0 then do                                   */
   966 *-*  end   /* if (lmmlist_option = "LIST"),                                   */
   967 *-* else
       *-*  do
   968 *-*   high_rc = max(high_rc,24)
   969 *-*   msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
   970 *-*   l_msg_header    = length(l_msg_header)
   971 *-*   say msg_header "ISPLMMFE" lmmlist_option "is an unsupportd function for this program."
   972 *-*   call print_trace_line
   973 *-*   print_trace_line_rc = RESULT
   974 *-*   signal error_exit_rtn
   975 *-*  end   /* else do - if (lmmlist_option = "LIST"),                         */
   976 *-* call process_lmmlist_cmd_rc_rtn lmmlist_cmd_rc lmmlist_option
   977 *-* process_lmmlist_cmd_rc_rtn_rc = RESULT
   978 *-* /* *** process member list                          *** */
   979 *-* high_rc = max(process_lmmlist_cmd_rc_rtn_rc,high_rc)
   980 *-* select   /* select (1) process_lmmlist_cmd_rc_rtn_rc        */
   981 *-* when process_lmmlist_cmd_rc_rtn_rc = 0
       *-*  then
       *-*  do
   982 *-*   if (lmmlist_option   = "LIST")
       *-*    then
       *-*    do
   983 *-*     mbr_count = mbr_count + 1
   984 *-*     if zlac = "01"
       *-*      then
       *-*      do
   985 *-*       mbr_auth_count = mbr_auth_count + 1
   986 *-*      end   /* if zlac = "01" then do       */
   987 *-*    end   /* if (lmmlist_option   = "LIST") then do */
   988 *-*  end   /* when process_lmmlist_cmd_rc_rtn_rc = 0 then  do   */
   989 *-* when process_lmmlist_cmd_rc_rtn_rc = 4
       *-*  then
       *-*  do
   990 *-*   nop
   991 *-*  end   /* when process_lmmlist_cmd_rc_rtn_rc = 4 then  do   */
   992 *-* when process_lmmlist_cmd_rc_rtn_rc = 8
       *-*  then
       *-*  do
   993 *-*   nop
   994 *-*  end   /* when process_lmmlist_cmd_rc_rtn_rc = 4 then  do   */
   995 *-* otherwise
       *-*  do
   996 *-*   nop
   997 *-*  end   /* otherwise do                                      */
   998 *-* end   /* select (1) process_lmmlist_cmd_rc_rtn_rc        */
   999 *-* /* *** end process member list                      *** */
  1000 *-* /* say "MEMBER:" mbrname                                       */
  1001 *-* high_rc = max(lmmlist_cmd_rc,process_lmmlist_cmd_rc_rtn_rc,high_rc)
  1002 *-* address (hcenv)
  1003 *-* /*  xtrc = trace(xtrc)                                                  */
  1004 *-* return(high_rc)   /* isp_lmmlist_rtn:                                      */
  1006 *-* /*                                                                                 */
  1007 *-* isp_lmopen_rtn:
  1008 *-* /* xtrc = trace("?I")                                                  */
  1009 *-* current_routine = "isp_lmopen_rtn:"
  1010 *-* parse upper arg argument
  1011 *-* parse var argument arg_ispapfid ' ' remainder
  1012 *-* msg_header     = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1013 *-* l_msg_header   = length(l_msg_header)
  1014 *-* hcenv = address()
  1015 *-* address "ISPEXEC"
  1016 *-* address_rc = rc
  1017 *-* lmopen_cmd     = "'LMOPEN DATAID("|| ispapfid ||") OPTION(INPUT)'"
  1018 *-* lmopen_cmd_say = remquote(lmopen_cmd)
  1019 *-* interpret lmopen_cmd
  1020 *-* lmopen_cmd_rc = RC
  1021 *-* call process_lmopen_rc_rtn lmopen_cmd_rc
  1022 *-* process_lmopen_rc_rtn_rc = RESULT
  1023 *-* if process_lmopen_rc_rtn_rc = 0
       *-*  then
       *-*  do
  1024 *-*   open_flag = 1
  1025 *-*   librow    = 0
  1026 *-*   mbrlist.  = ""
  1027 *-*  end   /* if process_lmopen_rc_rtn_rc = 0 then do                         */
  1028 *-* high_rc = max(lmopen_cmd_rc,high_rc)
  1029 *-* address (hcenv)
  1030 *-* address_rc = rc
  1031 *-* xtrc = trace(xtrc) /*                                               */
  1032 *-* return(high_rc)    /* isp_lmopen_rtn:                                      */
  1034 *-* /*                                                                                 */
  1035 *-* isp_lmclose_rtn:
  1036 *-* current_routine = "isp_lmclose_rtn:"
  1037 *-* /* xtrc = trace("?I")                                                  */
  1038 *-* parse upper arg argument
  1039 *-* parse var argument lmclose_cmd_rc ' ' remainder
  1040 *-* process_apf_data_set = word(argument,1)
  1041 *-* msg_header     = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1042 *-* l_msg_header   = length(l_msg_header)
  1043 *-* hcenv = address()
  1044 *-* address "ISPEXEC"
  1045 *-* address_rc = RC
  1046 *-* lmclose_cmd    = "'LMCLOSE DATAID("|| ispapfid ||")'"
  1047 *-* lmclose_cmd_say = remquote(lmclose_cmd)
  1048 *-* interpret lmclose_cmd
  1049 *-* lmclose_cmd_rc = RC
  1050 *-* call process_lmclose_rc_rtn lmclose_cmd_rc
  1051 *-* process_lmclose_rc_rtn_rc = RESULT
  1052 *-* if process_lmclose_rc_rtn_rc = 0
       *-*  then
       *-*  do
  1053 *-*   open_flag = 0
  1054 *-*  end   /* if process_lmopen_rc_rtn_rc = 0 then do                         */
  1055 *-* high_rc = max(lmclose_cmd_rc,high_rc)
  1056 *-* address (hcenv)
  1057 *-* address_rc = RC
  1058 *-* xtrc = trace(xtrc) /*                                               */
  1059 *-* return(high_rc)    /* isp_lmclose_rtn:                                     */
  1061 *-* /*                                                                                 */
  1062 *-* isp_lminit_rtn:
  1063 *-* /* xtrc = trace("?I")                                                  */
  1064 *-* current_routine = "isp_lminit_rtn:"
  1065 *-* parse upper arg argument
  1066 *-* parse var argument lminit_cmd_rc ' ' remainder
  1067 *-* process_apf_data_set = word(argument,1)
  1068 *-* msg_header     = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1069 *-* l_msg_header   = length(l_msg_header)
  1070 *-* hcenv = address()
  1071 *-* address "ISPEXEC"
  1072 *-* lminit_cmd     = "'LMINIT DATAID(ISPAPFID)  DATASET(''"|| apf_data_set ||"'')'"
  1073 *-* lminit_cmd_say = remquote(lminit_cmd)
  1074 *-* interpret lminit_cmd
  1075 *-* lminit_cmd_rc = RC
  1076 *-* call process_lminit_rc_rtn lminit_cmd_rc
  1077 *-* process_lminit_rc_rtn_rc = RESULT
  1078 *-* xtrc = trace(xtrc) /*                                               */
  1079 *-* high_rc = max(lminit_cmd_rc,high_rc)
  1080 *-* address (hcenv)
  1081 *-* return(high_rc)    /* isp_lminit_rtn:                                      */
  1083 *-* /*                                                                                 */
  1084 *-* isp_lmfree_rtn:
  1085 *-* /* xtrc = trace("?I")                                                  */
  1086 *-* parse upper arg argument
  1087 *-* parse var argument ispapfid ' ' remainder
  1088 *-* current_routine = "isp_lmfree_rtn:"
  1089 *-* process_apf_data_set = word(argument,1)
  1090 *-* msg_header      = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1091 *-* l_msg_header    = length(l_msg_header)
  1092 *-* hcenv = address()
  1093 *-* address "ISPEXEC"
  1094 *-* address_rc = RC
  1095 *-* lmfree_cmd      = "'LMFREE DATAID("|| ISPAPFID ||")'"
  1096 *-* lmfree_cmd_say  = remquote(lmfree_cmd)
  1097 *-* interpret lmfree_cmd
  1098 *-* lmfree_cmd_rc  = RC
  1099 *-* call process_lmfree_rc_rtn lmfree_cmd_rc
  1100 *-* process_lmfree_rc_rtn_rc = RESULT
  1101 *-* high_rc = max(lmfree_cmd_rc,process_lmfree_rc_rtn_rc,high_rc)
  1102 *-* address (hcenv)
  1103 *-* address_rc = RC
  1104 *-* xtrc = trace(xtrc) /*                                               */
  1105 *-* return(high_rc)    /* isp_lmfree_rtn:                                      */
  1107 *-* /*                                                                                 */
  1108 *-* process_lmopen_rc_rtn:
  1109 *-* current_routine = "process_lmopen_rc_rtn:"
  1110 *-* /* xtrc = trace("?I")                                                  */
  1111 *-* parse upper arg argument
  1112 *-* parse var argument lmopen_rc " " reminder
  1113 *-* msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1114 *-* l_msg_header = length(msg_header)
  1115 *-* select /* (1) lmopen_rc         */
  1116 *-* when lmopen_rc =  0
       *-*  then
       *-*  do
  1117 *-*   rc_00_msg = "LMOPEN  -" "Normal completion."
  1118 *-*   /* say msg_header rc_00_msg                                                     */
  1119 *-*  end   /* when lmopen_rc =  0 then do */
  1120 *-* when lmopen_rc =  8
       *-*  then
       *-*  do
  1121 *-*   say msg_header "ISPOPEN1" lmopen_cmd_say
  1122 *-*   rc_08_msg = "LMOPEN  -" "Data set could not be opened."
  1123 *-*   say msg_header "ISPINITE" rc_08_msg
  1124 *-*   high_rc = max(lmopen_rc,high_rc)
  1125 *-*   signal error_exit_rtn
  1126 *-*  end   /* when lmopen_rc =  0 then do */
  1127 *-* when lmopen_rc = 10
       *-*  then
       *-*  do
  1128 *-*   say msg_header "ISPOPEN1" lmopen_cmd_say
  1129 *-*   rc_10_msg = "LMOPEN  -" "No data set is associated with the given data ID; that is, LMINIT has not been completed."
  1130 *-*   say msg_header "ISPINITE" rc_10_msg
  1131 *-*   high_rc = max(lmopen_rc,high_rc)
  1132 *-*   signal error_exit_rtn
  1133 *-*  end   /* when lmopen_rc =  0 then do */
  1134 *-* when lmopen_rc = 12
       *-*  then
       *-*  do
  1135 *-*   say msg_header "ISPOPEN1" lmopen_cmd_say
  1136 *-*   rc_12_msg   = "LMOPEN  -" "One of these:"
  1137 *-*   rc_12_msg_1 = "LMOPEN  -" " -  The parameter value is invalid."
  1138 *-*   rc_12_msg_2 = "LMOPEN  -" " -  Data set is already open."
  1139 *-*   rc_12_msg_3 = "LMOPEN  -" " -  Cannot open concatenated data sets for output." "One of these:"
  1140 *-*   rc_12_msg_4 = "LMOPEN  -" " -  Cannot open a data set allocated SHR for output."
  1141 *-*   say msg_header "ISPOPE12" ispapfid rc_12_msg
  1142 *-*   say msg_header "        " rc_12_msg_1
  1143 *-*   say msg_header "        " rc_12_msg_2
  1144 *-*   say msg_header "        " rc_12_msg_3
  1145 *-*   say msg_header "        " rc_12_msg_4
  1146 *-*   high_rc = max(lmopen_rc,high_rc)
  1147 *-*   signal error_exit_rtn
  1148 *-*  end   /* when lmopen_rc =  0 then do */
  1149 *-* when lmopen_rc = 16
       *-*  then
       *-*  do
  1150 *-*   say msg_header "ISPOPEN1" lmopen_cmd_say
  1151 *-*   rc_16_msg = "LMOPEN  -" "Truncation or translation error in accessing dialog variables."
  1152 *-*   say msg_header "ISPOPENE" rc_16_msg
  1153 *-*   high_rc = max(lmopen_rc,high_rc)
  1154 *-*   signal error_exit_rtn
  1155 *-*  end   /* when lmopen_rc =  0 then do */
  1156 *-* when lmopen_rc = 20
       *-*  then
       *-*  do
  1157 *-*   say msg_header "ISPOPEN1" lmopen_cmd_say
  1158 *-*   rc_20_msg = "LMOPEN  -" "Severe error; unable to continue."
  1159 *-*   say msg_header "ISPOPEN1" rc_20_msg
  1160 *-*   high_rc = max(lmopen_rc,high_rc)
  1161 *-*   signal error_exit_rtn
  1162 *-*  end   /* when lmopen_rc =  0 then do */
  1163 *-* otherwise
       *-*  do
  1164 *-*   say msg_header "ISPOPEN1" "LMOPEN  -" lmopen_cmd_say
  1165 *-*   other_msg = "LMOPEN  -" "An undefined error has occurred."
  1166 *-*   say msg_header "ISPOPEN1" other_msg
  1167 *-*   high_rc = max(lmopen_rc,high_rc)
  1168 *-*   signal error_exit_rtn
  1169 *-*  end   /* when lmopen_rc =  0 then do */
  1170 *-* end   /* select  - (1) lmopen_rc         */
  1171 *-* high_rc = max(lmopen_rc,high_rc)
  1172 *-* xtrc = trace(xtrc) /*                                                       */
  1173 *-* return(high_rc)    /* process_lmopen_rc_rtn:                               */
  1175 *-* /*                                                                                 */
  1176 *-* process_lmclose_rc_rtn:
  1177 *-* current_routine = "process_lmclose_rc_rtn:"
  1178 *-* /* xtrc = trace("?I")                                                  */
  1179 *-* parse upper arg argument
  1180 *-* parse var argument lmclose_rc " " reminder
  1181 *-* high_rc         = lmclose_cmd_rc
  1182 *-* msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1183 *-* l_msg_header = length(msg_header)
  1184 *-* select /* (1) lmclose_rc        */
  1185 *-* when lmclose_rc = 0
       *-*  then
       *-*  do
  1186 *-*   rc_00_msg = "LMCLOSE -" "Normal completion."
  1187 *-*   /* say msg_header rc_00_msg                                                     */
  1188 *-*  end   /* when lmclose_rc = 0 then do */
  1189 *-* when lmclose_rc = 8
       *-*  then
       *-*  do
  1190 *-*   say msg_header "ISPCLOSE" lmclose_cmd_say
  1191 *-*   rc_08_msg = "LMCLOSE -" "Data set is not open."
  1192 *-*   say msg_header "ISPINITE" rc_08_msg
  1193 *-*   high_rc = max(lmclose_rc,high_rc)
  1194 *-*   signal error_exit_rtn
  1195 *-*  end   /* when lmclose_rc = 0 then do */
  1196 *-* when lmclose_rc = 10
       *-*  then
       *-*  do
  1197 *-*   say msg_header "ISPCLOSE" lmclose_cmd_say
  1198 *-*   rc_10_msg = "LMCLOSE -" "No ISPF library or data set associated with the given data ID; that is, LMINIT has not been c
ompleted."
  1199 *-*   say msg_header "ISPCLOSE" rc_10_msg
  1200 *-*   high_rc = max(lmclose_rc,high_rc)
  1201 *-*   signal error_exit_rtn
  1202 *-*  end   /* when lmclose_rc = 0 then do */
  1203 *-* when lmclose_rc = 20
       *-*  then
       *-*  do
  1204 *-*   say msg_header "ISPCLOSE" lmclose_cmd_say
  1205 *-*   rc_20_msg = "LMCLOSE -" "Severe error; unable to continue."
  1206 *-*   say msg_header "ISPCLOSE" rc_20_msg
  1207 *-*   high_rc = max(lmclose_rc,high_rc)
  1208 *-*   signal error_exit_rtn
  1209 *-*  end   /* when lmclose_rc = 0 then do */
  1210 *-* otherwise
       *-*  do
  1211 *-*   say msg_header "ISPCLOSE" lmclose_cmd_say
  1212 *-*   other_msg = "LMCLOSE -" "An undefined error has occurred."
  1213 *-*   say msg_header "ISPCLOSE" other_msg
  1214 *-*   high_rc = max(lmclose_rc,high_rc)
  1215 *-*   signal error_exit_rtn
  1216 *-*  end   /* when lmclose_rc = 0 then do */
  1217 *-* end   /* select  - (1) lmclose_rc        */
  1218 *-* high_rc = max(lmclose_rc,high_rc)
  1219 *-* xtrc = trace(xtrc) /*                                                       */
  1220 *-* return(high_rc)    /* process_lmclose_rc_rtn:                              */
  1222 *-* /*                                                                                 */
  1223 *-* process_lminit_rc_rtn:
  1224 *-* current_routine = "process_lminit_rc_rtn:"
  1225 *-* /* xtrc = trace("?I")                                                  */
  1226 *-* parse upper arg argument
  1227 *-* parse var argument lminit_rc " " reminder
  1228 *-* high_rc         = max(lminit_cmd_rc,high_rc)
  1229 *-* msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1230 *-* l_msg_header = length(msg_header)
  1231 *-* select /* (1) lminit_rc         */
  1232 *-* when lminit_rc =  0
       *-*  then
       *-*  do
  1233 *-*   rc_00_msg = "LMINIT  -" "Normal completion."
  1234 *-*   /* say msg_header rc_00_msg                                                     */
  1235 *-*  end   /* when lminit_rc =  0 then do */
  1236 *-* when lminit_rc =  8
       *-*  then
       *-*  do
  1237 *-*   say msg_header "ISPINIT1" lminit_cmd_say
  1238 *-*   rc_08_msg = "LMINIT  -",
                              "Data ID not created; the error condition is described in 'System variables used to format error mess
ages'."
  1240 *-*   say msg_header "ISPINITE" rc_08_msg
  1241 *-*   high_rc = max(lminit_rc,high_rc)
  1242 *-*   signal error_exit_rtn
  1243 *-*  end   /* when lminit_rc =  0 then do */
  1244 *-* when lminit_rc = 12
       *-*  then
       *-*  do
  1245 *-*   say msg_header "ISPINIT1" lminit_cmd_say
  1246 *-*   rc_12_msg = "LMINIT  -" "The parameter value is invalid."
  1247 *-*   say msg_header "ISPINITe" rc_12_msg
  1248 *-*   high_rc = max(lminit_rc,high_rc)
  1249 *-*   signal error_exit_rtn
  1250 *-*  end   /* when lminit_rc =  0 then do */
  1251 *-* when lminit_rc = 16
       *-*  then
       *-*  do
  1252 *-*   say msg_header "ISPINIT1" lminit_cmd_say
  1253 *-*   rc_16_msg = "LMINIT  -" "Truncation or translation error in accessing dialog variables."
  1254 *-*   say msg_header "ISPINIT1" rc_16_msg
  1255 *-*   high_rc = max(lminit_rc,high_rc)
  1256 *-*   signal error_exit_rtn
  1257 *-*  end   /* when lminit_rc =  0 then do */
  1258 *-* when lminit_rc = 20
       *-*  then
       *-*  do
  1259 *-*   say msg_header "ISPINIT1" lminit_cmd_say
  1260 *-*   rc_20_msg = "LMINIT  -" "Severe error; unable to continue."
  1261 *-*   say msg_header "ISPINIT1" rc_20_msg
  1262 *-*   high_rc = max(lminit_rc,high_rc)
  1263 *-*   signal error_exit_rtn
  1264 *-*  end   /* when lminit_rc =  0 then do */
  1265 *-* otherwise
       *-*  do
  1266 *-*   say msg_header "ISPINIT1" lminit_cmd_say
  1267 *-*   other_msg = "LMINIT  -" "An undefined error has occurred."
  1268 *-*   say msg_header "ISPINIT1" other_msg
  1269 *-*   high_rc = max(lminit_rc,high_rc)
  1270 *-*   signal error_exit_rtn
  1271 *-*  end   /* when lminit_rc =  0 then do */
  1272 *-* end   /* select  - (1) lminit_rc         */
  1273 *-* high_rc = max(lminit_rc,high_rc)
  1274 *-* xtrc = trace(xtrc) /*                                                       */
  1275 *-* return(high_rc)    /* process_lminit_rc_rtn:                               */
  1277 *-* /*                                                                                 */
  1278 *-* process_lmmlist_cmd_rc_rtn:
  1279 *-* current_routine = "process_lmmlist_cmd_rc_rtn:"
  1280 *-* /*  xtrc = trace("?")                                                  */
  1281 *-* parse upper arg argument
  1282 *-* parse var argument lmmlist_cmd_rc " " lmmlist_option " " reminder
  1283 *-* high_rc = max(lmmlist_cmd_rc,high_rc)
  1284 *-* msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1285 *-* l_msg_header = length(msg_header)
  1287 *-* select /* (1) lmmlist_cmd_rc    */
  1289 *-* when lmmlist_cmd_rc =  0
       *-*  then
       *-*  do
  1290 *-*   rc_00_msg      = ispapfid "LMMLIST -" "Normal completion."
  1291 *-*   rc_00_msg_LIST = ispapfid "LMMLIST -" " - LIST option - Normal completion."
  1292 *-*   rc_00_msg_FREE = ispapfid "LMMLIST -" " - FREE option - Normal completion. The member list is freed successfully."
  1293 *-*   rc_00_msg_SAVE = ispapfid " - SAVE option - For a data ID, the LMMLIST service has been invoked with the SAVE option a
fter being",                      "invoked with LIST option, but before being invoked with the FREE option."
  1295 *-*   /* say msg_header "ISPLMMF1" rc_00_msg                                            */
  1296 *-*   msg_id   = "ISPLMML0"
  1297 *-*   msg_text = rc_00_msg
  1298 *-*   msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1299 *-*   l_msg_header = length(msg_header)
  1300 *-*   call print_trace_line
  1301 *-*   print_trace_line_rc  = RESULT
  1302 *-*   call process_subselect
  1303 *-*   process_subselect_rc = RESULT
  1304 *-*  end   /* when lmmlist_cmd_rc = 0 then do  */
  1306 *-* when lmmlist_cmd_rc =  4
       *-*  then
       *-*  do
  1307 *-*   rc_04_msg  = "ISPLMFE4" ispapfid "LMMLIST -" "Empty Member List."
  1308 *-*   say msg_header "ISPLMFE4" rc_04_msg
  1309 *-*   empty_library = 1
  1310 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1311 *-*  end   /* when lmmlist_cmd_rc = 4 then do */
  1313 *-* when lmmlist_cmd_rc =  8
       *-*  then
       *-*  do
  1314 *-*   say msg_header "ISPLMFE8" ispapfid lmmlist_cmd_say
  1315 *-*   rc_08_msg      = "LMMLIST -" "One of these:"
  1316 *-*   rc_08_msg_LIST = "LMMLIST -" " - LIST option - End of member list."
  1317 *-*   rc_08_msg_FREE = "LMMLIST -" " - FREE option - Member list does not exist."
  1318 *-*   rc_08_msg_SAVE = "LMMLIST -",
                                 " - SAVE option - For a data ID, the LMMLIST service has been invoked with the SAVE option after b
eing invoked",                      "with LIST option, but before being invoked with the FREE option."
  1321 *-*   select   /* (2) lmmlist_option           */
  1322 *-*   when lmmlist_option = "LIST"
       *-*    then
       *-*    do
  1323 *-*     say msg_header "ISPLMF08" ispapfid lmmlist_option rc_08_msg_LIST
  1324 *-*    end   /* if lmmlist_option = "LIST" then do */
  1325 *-*   when lmmlist_option = "FREE"
       *-*    then
       *-*    do
  1326 *-*     say msg_header "ISPLMF08" ispapfid lmmlist_option rc_08_msg_FREE
  1327 *-*     signal error_exit_rtn
  1328 *-*    end   /* if lmmlist_option = "LIST" then do */
  1329 *-*   when lmmlist_option = "SAVE"
       *-*    then
       *-*    do
  1330 *-*     say msg_header "ISPLMF08" ispapfid lmmlist_option rc_08_msg_SAVE
  1331 *-*    end   /* if lmmlist_option = "LIST" then do */
  1332 *-*   otherwise
       *-*    do
  1333 *-*     say msg_header "ISPLMF08" ispapfid "lmmlist - invalid_option."
  1334 *-*     signal error_exit_rtn
  1335 *-*    end   /* if lmmlist_option = "LIST" then do */
  1336 *-*   end     /* (2) lmmlist_option           */
  1338 *-*   call process_lmmlist_option
  1339 *-*   process_lmmlist_option_rc = RESULT
  1341 *-*   /* say msg_header "ISPINIT1" rc_00_msg                                           */
  1342 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1343 *-*  end   /* when lmmlist_cmd_rc =  8 then do */
  1345 *-* when lmmlist_cmd_rc = 10
       *-*  then
       *-*  do
  1346 *-*   say msg_header "ISPLMF10" ispapfid rc_10_msg
  1347 *-*   rc_10_msg  = "LMMLIST -" "No data set is associated with the given data ID; that is, LMINIT has not been completed."
  1348 *-*   say msg_header "ISPLMML1" rc_10_msg   /*                                        */
  1349 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1350 *-*   signal error_exit_rtn
  1351 *-*  end   /* when lmmlist_cmd_rc = 10 then do */
  1353 *-* when lmmlist_cmd_rc = 12
       *-*  then
       *-*  do
  1354 *-*   say msg_header "ISPLMF10" ispapfid lmmlist_cmd_say
  1355 *-*   rc_12_msg  = "LMMLIST -" "One of the following:"
  1356 *-*   rc_12_msg1 = "LMMLIST -" " - Data set is not open or is not open for input."
  1357 *-*   rc_12_msg2 = "LMMLIST -" " - A parameter value is invalid."
  1358 *-*   rc_12_msg3 = "LMMLIST -" " - Data set is not partitioned."
  1359 *-*   rc_12_msg4 = "LMMLIST -" " - LOCK parameter was specified."
  1360 *-*   say msg_header "ISPLMML1" rc_12_msg   /*                                        */
  1361 *-*   say msg_header "        " rc_12_msg1  /*                                        */
  1362 *-*   say msg_header "        " rc_12_msg2  /*                                        */
  1363 *-*   say msg_header "        " rc_12_msg3  /*                                        */
  1364 *-*   say msg_header "        " rc_12_msg4  /*                                        */
  1365 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1366 *-*   signal error_exit_rtn
  1367 *-*  end   /* when lmmlist_cmd_rc = 12 then do */
  1369 *-* when lmmlist_cmd_rc = 16
       *-*  then
       *-*  do
  1370 *-*   say msg_header "ISPLMF20" ispapfid lmmlist_cmd_say
  1371 *-*   rc_16_msg = "LMMLIST -" "Severe error; unable to continue."
  1372 *-*   say msg_header "ISPINIT1" rc_16_msg  /*                                        */
  1373 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1374 *-*   signal error_exit_rtn
  1375 *-*  end   /* when lmmlist_cmd_rc = 16 then do */
  1377 *-* when lmmlist_cmd_rc = 20
       *-*  then
       *-*  do
  1378 *-*   say msg_header "ISPLMF20" lmmlist_cmd_say
  1379 *-*   rc_20_msg = "LMMLIST -" "Severe error; unable to continue."
  1380 *-*   say msg_header "ISPINIT1" ispapfid rc_20_msg   /*                                       */
  1381 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1382 *-*   signal error_exit_rtn
  1383 *-*  end   /* when lmmlist_cmd_rc = 20 then do */
  1385 *-* otherwise
       *-*  do
  1386 *-*   other_msg = "LMMLIST -" "Undefined Error Occurred."
  1387 *-*   say msg_header "ISPLMFOO" other_msg
  1388 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1389 *-*   signal error_exit_rtn
  1390 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1392 *-* end   /* select  - (1) lminit_rc         */
  1393 *-* xtrc = trace(xtrc) /*                                                       */
  1394 *-* return(high_rc)    /* process_cols_rtn */
  1396 *-* /*                                                                                 */
  1397 *-* process_lmmlist_option:
  1398 *-* select   /* (2) lmmlist_option   */
  1400 *-* when lmmlist_option = "LIST"
       *-*  then
       *-*  do
  1401 *-*   /* say msg_header "ISPLMMF1" rc_00_msg_LIST                                    */
  1402 *-*   /* say msg_header "ISPLMFF1" ispapfid lmmlist_option                           */
  1403 *-*   /* say msg_header "ISPLMMF1" rc_00_msg_LIST                                    */
  1404 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1405 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1407 *-* when lmmlist_option = "FREE"
       *-*  then
       *-*  do
  1408 *-*   say msg_header "ISPLMFF2" ispapfid lmmlist_option
  1409 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1410 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1412 *-* when lmmlist_option = "SAVE"
       *-*  then
       *-*  do
  1413 *-*   say msg_header "ISPLMFF3" ispapfid lmmlist_option "is not supported."
  1414 *-*   high_rc = max(lmmlist_cmd_rc,high_rc)
  1415 *-*   signal error_exit_rtn
  1416 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1418 *-* otherwise
       *-*  do
  1419 *-*   nop
  1420 *-*   signal error_exit_rtn
  1421 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1423 *-* end   /* select (2) lmmlist_option   */
  1425 *-* return(high_rc)    /* process_lmmlist_option:                              */
  1427 *-* /*                                                                                 */
  1428 *-* process_lmfree_rc_rtn:
  1429 *-* current_routine = "process_lmfree_rc_rtn:"
  1430 *-* /* xtrc = trace("?I")                                                  */
  1431 *-* parse upper arg argument
  1432 *-* parse var argument lmfree_cmd_rc " " reminder
  1433 *-* high_rc = max(lmfree_cmd_rc,high_rc)
  1434 *-* msg_header = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  1435 *-* l_msg_header = length(msg_header)
  1436 *-* select /* (1) lmfree_cmd_rc         */
  1437 *-* when lminit_cmd_rc =  0
       *-*  then
       *-*  do
  1438 *-*   rc_00_msg = "LMFREE  -" "Normal completion."
  1439 *-*   /* say msg_header "ISPFREE1" rc_00_msg                                           */
  1440 *-*  end   /* when lminit_rc =  0 then do */
  1441 *-* when lminit_cmd_rc =  8
       *-*  then
       *-*  do
  1442 *-*   say msg_header "ISPLMFE8" lmfree_cmd_say
  1443 *-*   rc_08_msg = "LMFREE  -" "Member not found."
  1444 *-*   /* say msg_header "ISPINIT1" rc_00_msg                                           */
  1445 *-*   high_rc = max(lminit_rc,high_rc)
  1446 *-*   signal error_exit_rtn
  1447 *-*  end   /* when lminit_rc =  0 then do */
  1448 *-* when lminit_cmd_rc = 10
       *-*  then
       *-*  do
  1449 *-*   say msg_header "ISPLMF10" lmfree_cmd_say
  1450 *-*   rc_10_msg = "LMFREE  -" "No ISPF library or data set is associated with the given data ID; that is, LMINIT has not bee
n completed."
  1451 *-*   /* say msg_header "ISPINIT1" rc_00_msg                                           */
  1452 *-*   high_rc = max(lminit_rc,high_rc)
  1453 *-*   signal error_exit_rtn
  1454 *-*  end   /* when lminit_rc =  0 then do */
  1455 *-* when lminit_cmd_rc = 20
       *-*  then
       *-*  do
  1456 *-*   say msg_header "ISPLMF20" lmfree_cmd_say
  1457 *-*   rc_20_msg = "LMFREE  -" "Severe error; unable to continue."
  1458 *-*   /* say msg_header "ISPINIT1" rc_00_msg                                    */
  1459 *-*   high_rc = max(lminit_rc,high_rc)
  1460 *-*   signal error_exit_rtn
  1461 *-*  end   /* when lminit_rc =  0 then do */
  1462 *-* otherwise
       *-*  do
  1463 *-*   other_msg = "LMFREE  -" "Undefined Error Occurred."
  1464 *-*   say msg_header "ISPLMFOO" other_msg
  1465 *-*   high_rc = max(lminit_rc,high_rc)
  1466 *-*   signal error_exit_rtn
  1467 *-*  end   /* when lminit_rc =  0 then do */
  1468 *-* end   /* select  - (1) lminit_rc         */
  1469 *-* xtrc = trace(xtrc) /*                                                       */
  1470 *-* return(high_rc)    /* process_cols_rtn */
  1472 *-* /*                                                                                 */
  1473 *-* isp_alloc_rtn:
  1474 *-* parse upper arg argument
  1475 *-* current_routine = "isp_alloc_rtn:"
  1476 *-* /* xtrc = trace("?I")                                                  */
  1477 *-* apf_data_set = word(argument,1)
  1478 *-* /* xtrc = trace("?I")                                                  */
  1479 *-* hcenv = address()
  1480 *-* if rexxtools_available
       *-*  then
       *-*  do
  1481 *-*   address "REXXTOOL"
  1482 *-*  end   /* if rexxtools_available then do */
  1483 *-* else
       *-*  do
  1484 *-*   address "TSO"
  1485 *-*  end   /* else do - if rexxtools_available then do */
  1486 *-* ispddn    = "ISPAPFL0"
  1487 *-* isp_alloc_cmd     = "'ALLOC F("|| ispddn ||")  DATASET(''"|| apf_data_set ||"'') SHR REUSE'"
  1488 *-* isp_alloc_cmd_say = remquote(isp_alloc_cmd)
  1489 *-* interpret isp_alloc_cmd
  1490 *-* isp_alloc_cmd_rc = RC
  1491 *-* if rexxtools_available
       *-*  then
       *-*  do
  1492 *-*   call process_rexxtools_alloc_rc_rtn isp_alloc_cmd_rc
  1493 *-*   isp_alloc_cmd_rc = RESULT
  1494 *-*  end   /* if rexxtools_available then do */
  1495 *-* else
       *-*  do
  1496 *-*   call process_tso_alloc_rc_rtn isp_alloc_cmd_rc
  1497 *-*   isp_alloc_cmd_rc = RESULT
  1498 *-*  end   /* else do - if rexxtools_available then do */
  1499 *-* /* say msg_header "ISPALC00" isp_alloc_cmd_say                           */
  1500 *-* high_rc = max(isp_alloc_cmd_rc )
  1501 *-* xtrc = trace(xtrc) /*                                               */
  1502 *-* address (hcenv)
  1503 *-* return(high_rc)    /* process_cols_rtn */
  1505 *-* /*                                                                                 */
  1506 *-* isp_free_rtn:
  1507 *-* parse upper arg argument
  1508 *-* current_routine = "isp_free_rtn:"
  1509 *-* /* xtrc = trace("?I")                                                  */
  1510 *-* hcenv = address()
  1511 *-* if rexxtools_available
       *-*  then
       *-*  do
  1512 *-*   address "REXXTOOL"
  1513 *-*  end   /* if rexxtools_available then do */
  1514 *-* else
       *-*  do
  1515 *-*   address "TSO"
  1516 *-*  end   /* else do - if rexxtools_available then do */
  1517 *-* ispddn    = "ISPAPFL0"
  1518 *-* isp_free_cmd      = "'FREE F("|| ispddn ||")'"
  1519 *-* isp_free_cmd_say = remquote(isp_free_cmd)
  1520 *-* interpret isp_free_cmd
  1521 *-* isp_free_cmd_rc = RC
  1522 *-* if rexxtools_available
       *-*  then
       *-*  do
  1523 *-*   call process_rexxtools_free_rc_rtn isp_free_cmd_rc
  1524 *-*   isp_free_cmd_rc = RESULT
  1525 *-*  end   /* if rexxtools_available then do */
  1526 *-* else
       *-*  do
  1527 *-*   call process_tso_free_rc_rtn isp_free_cmd_rc
  1528 *-*   isp_free_cmd_rc = RESULT
  1529 *-*  end   /* else do - if rexxtools_available then do */
  1530 *-* /* say msg_header "ISPFREE1" isp_free_cmd_say                            */
  1531 *-* xtrc = trace(xtrc) /*                                               */
  1532 *-* high_rc = max(isp_alloc_cmd_rc )
  1533 *-* xtrc = trace(xtrc) /*                                               */
  1534 *-* address (hcenv)
  1535 *-* return(high_rc)    /* process_cols_rtn */
  1537 *-* /*                                                                                 */
  1538 *-* sdsf_routine:
  1539 *-* current_routine = "sdsf_routine:"
  1540 *-* /***************************************************************        *
                        *  SDSF RGEN Generated EXEC                                             *
                                     *  This exec was generated by the SDSF RGEN command on                  *  Monday 2021-03-22 a
t 13:55:52.92.                                    *                                                                       *  5650-Z
OS                                                             *  SDSF level = z/OS 02.03.00 (HQX77B0)
    *                                                                       *  Operation =
                 *                                                                       *    - Access primary panel LNK
                              *                                                                       *****************************
**********************************/
  1555 *-* rc = isfcalls('ON')
  1557 *-* sdsf_high_rc = 36
  1559 *-* /* xtrc = trace("?I")                                                  */
  1561 *-* if debug = "DEBUG"
       *-*  then
       *-*  do /* If debug mode */
  1562 *-*   verbose = "VERBOSE"  /* .. use SDSF verbose mode */
  1563 *-*  end
  1565 *-*  /*----------------------------------------------*/
  1566 *-*  /* Configure environment with special variables */
  1567 *-*  /*----------------------------------------------*/
  1568 *-* owner      = userid()
  1569 *-* if (owner = "SFRJOB") & (hwname = "INZ14ZR1")
       *-*  then
       *-*  do
  1570 *-*   dsn_pref = "SFRMVSDS"
  1571 *-*  end   /* if owner = "SFRJOB" then do  */
  1572 *-* else
       *-*  do
  1573 *-*   dsn_pref = owner
  1574 *-*  end   /* else do                      */
  1575 *-* isfprefix  = '*'            /* Corresponds to PREFIX command */
  1576 *-* isfowner   = owner || "*"   /* Corresponds to OWNER command */
  1577 *-* isfsysname = ''             /* Corresponds to SYSNAME command */
  1579 *-* isfdest=' ' || ,            /* Dest name 1 */                                   ' ' || ,            /* Dest name 2 */
                                ' ' || ,            /* Dest name 3 */                                   ' '                 /* Dest
 name 4 */
  1585 *-* /* Access the SDSF panels */
  1586 *-* lists.1   = "APF"
  1587 *-* lists.0   = 1
  1588 *-* do lix = 1 to lists.0
  1589 *-*  list_name = lists.lix
  1591 *-*  Address SDSF "ISFEXEC" list_name "("|| verbose ||" DELAYED NOMODIFY)"
  1592 *-*  lrc = rc
  1593 *-*  /*    say display_date time() exec_name "SDSF CMD       :" isfcmd    say display_date time() exec_name "SDSF ISFCOLS
:" isfcols     say display_date time() exec_name "SDSF ISFDCOLS  :" isfdcols    say display_date time() exec_name "SDSF ISFDISPLAY:
" isfdisplay    say display_date time() exec_name "SDSF ISFTITLES :" isftitles          */
  1601 *-*  call msgrtn  "ISFEXEC" list_name    /* List messages */
  1602 *-*  if lrc <> 0
       *-*   then
       *-*   do  /* If command failed */
  1603 *-*    Say display_date time() exec_name translate(format(lrc,2,0),"0"," "),
        "** ISFEXEC" list_name "failed with rc="|| translate(format(lrc,2,0),"0"," ") ||"."
  1605 *-*    high_rc = 20
  1606 *-*    signal error_exit_rtn
  1607 *-*   end
  1609 *-*  call process_columns_rtn isfrows "." sdsfocols /* List all rows and columns */
  1610 *-*  process_columns_rtn_rc = RESULT
  1612 *-*  /*      do ix = 1 to newix      say display_date time() exec_name length(file_array.ix) file_array.ix      end   /* do
ix = 1 to newix  */        */
  1618 *-*  ocols        = ""
  1619 *-*  isfcols      = ""
  1620 *-*  isfdcols     = ""
  1621 *-*  file_array.  = ""
  1622 *-*  file_array.0 = 1
  1623 *-* end   /* do lix = 1 to lists.0  */
  1625 *-* rc = isfcalls('OFF')
  1626 *-* sdsf_high_rc = max(process_columns_rtn_rc,rc)
  1628 *-* return(sdsf_high_rc)   /* sdsf_routine:                                               */
  1630 *-* /*                                                                   */
  1631 *-* remquote:
       *-* procedure expose xtrc xmsg squote high_rc
  1632 *-* current_routine = "remquote:"
  1633 *-* xtrc = trace("O")  /*                                               */
  1634 *-* /* xtrc = trace("?I")                                                  */
  1635 *-* parse upper arg argument
  1636 *-* argument = translate(argument,"00"x," ")
  1637 *-* parse var argument cmd " " remainder
  1638 *-* cmd_say   = cmd
  1639 *-* squotei = squote || squote
  1640 *-* squote_pos = pos(squotei,cmd_say,1)
  1641 *-* do while squote_pos > 0
  1642 *-*  cmd_say = delstr(cmd_say,squote_pos,1)
  1643 *-*  squote_pos = pos(squotei,cmd_say,1)
  1644 *-* end   /* do while squote_pos > 0 */
  1645 *-* cmd_say  = translate(cmd_say," ","00"x)
  1646 *-* xtrc = trace(xtrc) /*                                               */
  1647 *-* return(cmd_say)   /* remquote: procedure                                   */
  1649 *-* /* Start_Message: Version 02.07 2020-05-06 RWSUHR                    */
  1650 *-* start_message:
  1651 *-* current_routine = "start_message:"
  1652 *-* rtime = 'TIME'('E')       /* Bypass the time() function in this program */
  1653 *-* parse upper arg mp1
  1654 *-* parse source info
  1655 *-* parse value info with i1 i2 i3 i4 i5 i6 i7 i8 i9
  1656 *-* if debug = "DEBUG"
       *-*  then
       *-*  do
  1657 *-*   say "Start-Message:" member_name debug "Mode entered."
  1658 *-*   message_ind = 1
  1659 *-*  end   /* if debug = "DEBUG",      */
  1660 *-* else
       *-*  do
  1661 *-*   message_ind = 0
  1662 *-*  end   /* Else do    */
  1663 *-* /* say "I1="|| i1 "I2="|| i2 "I3="|| i3 "I4="|| i4 "I5="|| i5,        "I6="|| i6 "I7="|| i7 "I8="|| i8 "I9="|| i9    pul
l a1      */
  1667 *-* Info_env      = i1    /* TSO                                                                    */
  1668 *-* Info_type     = i2    /* COMMAND, FUNCTION, SUBROUTINE                                          */
  1669 *-* Info_name     = i3    /* Member Name                                                            */
  1670 *-* Info_ddname   = i4    /* DD Name from which member was loaded                                   */
  1671 *-* Info_dsname   = i5    /* DSN from which member was loaded                                       */
  1672 *-* Info_u1       = i6    /* Name of EXEC as it was called, or ?                                    */
  1673 *-* Info_Hostenv  = i7    /* Initial (default) host command environment (TSO or MVS)                */
  1674 *-* Info_Addrenv  = i8    /* Name of the address space in uppercase. MVS, TSO/E, or ISPF            */
  1675 *-* Info_u2       = i9    /* Eight character user token.  (PARSETOK)                                */
  1676 *-* exec_name = i3
  1677 *-* standard_Date = Date('S')
  1678 *-* Start_msg     = 'Start_Message: Version 02.06 2019-05-02 RWSUHR' /*                             */
  1679 *-* Sys_Proc      = sysvar('SYSPROC')    /* TSO PROC Name                                           */
  1680 *-* Sys_lterm     = sysvar('SYSLTERM')   /* Number of lines available on screen                     */
  1681 *-* Sys_wterm     = sysvar('SYSWTERM')   /* Width of screen                                         */
  1682 *-* Sys_Env       = sysvar('SYSENV')     /* Whether exec is running in foreground or background     */
  1683 *-* Sys_Nest      = sysvar('SYSNEST')    /* Whether exec was invoked from another exec or CLIST.    */
  1684 *-* Sys_PCMD      = sysvar('SYSPCMD')    /* Name of most recently executed command                  */
  1685 *-* Sys_SCMD      = sysvar('SYSSCMD')    /* Name of most recently executed subcommand               */
  1686 *-* Sys_HSM       = sysvar('SYSHSM')     /* Level of Data Facility Hierarchical Storage Manager.    */
  1687 *-* Sys_JES       = sysvar('SYSJES')     /* Name and level of JES installed.                        */
  1688 *-* Sys_LRACF     = sysvar('SYSLRACF')   /* Level of RACF installed.                                */
  1689 *-* Sys_RACF      = sysvar('SYSRACF')    /* Whether RACF is available.                              */
  1690 *-* Sys_Node      = sysvar('SYSNODE')    /* Network node name of the installation's JES.            */
  1691 *-* Sys_TSOE      = sysvar('SYSTSOE')    /* Level of TSO/E installed in the form.                   */
  1692 *-* Sys_TERMID    = sysvar('SYSTERMID')  /* Terminal ID of the terminal where the REXX exec was.    */
  1693 *-* customer      = sysvar('SYSNODE')    /* JES2 NJE Node name                                      */
  1694 *-* ispf          = sysvar('SYSISPF')    /* Whether ISPF is available for exec                      */
  1695 *-* smfid         = mvsvar('SYSSMFID')   /* System SMF Id                                           */
  1696 *-* sysplex       = mvsvar('SYSPLEX')    /* The MVS sysplex name as found in the COUPLExx or        */
  1697 *-* sysseclab     = mvsvar('SYSSECLAB')  /* The security label (SECLABEL) name of the TSO/E session */
  1698 *-* sysclone      = mvsvar('SYSCLONE')   /* MVS system symbol representing its system name          */
  1699 *-* sysname       = mvsvar('SYSNAME')    /* MVS system name                                         */
  1700 *-* mvsrel        = mvsvar('SYSMVS')     /* MVS release                                             */
  1701 *-* sms           = mvsvar('SYSSMS')     /* SMS Status                                              */
  1702 *-* dfp           = mvsvar('SYSDFP')     /* DFP Level                                               */
  1703 *-* opsys         = mvsvar('SYSOPSYS')   /* Current OS                                              */
  1704 *-* symd_ldate    = standard_Date
  1705 *-* symd_sldate   = substr(symd_ldate,3,length(symd_ldate)-2)
  1706 *-* prefix        = "SYS3"
  1707 *-* jobname       = mvsvar('SYMDEF','JOBNAME')
  1708 *-* hwname        = mvsvar('SYMDEF','HRDWNAME')
  1709 *-* hrdwname      = mvsvar('SYMDEF','HRDWNAME')
  1710 *-* jobid         = getjobid()
  1711 *-* racfgrp       = getgrpn()
  1712 *-* prgnm         = getprgnm()
  1713 *-* regk          = getregk()
  1714 *-* jobid_short   = substr(jobid,1,1)||substr(jobid,4,length(jobid)-3)
  1715 *-* display_date  = Translate('1234-56-78',Date('S'),'12345678')
  1716 *-* if (Sys_Env == 'FORE')
       *-*  then
       *-*  do
  1717 *-*   if ((Info_type \= 'SUBROUTINE') &,      (Info_type \= 'FUNCTION')),
  1719 *-*    then
       *-*    do
  1720 *-*     x=cls()
  1721 *-*    end   /* if (Info_type \= 'SUBROUTINE') & (Info_type \= 'FUNCTION') then do */
  1722 *-*  end   /* if (Sys_Env == 'FORE') */
  1723 *-* if info_ddname <> "?"
       *-*  then
       *-*  do
  1724 *-*   ldsi_rc       = listdsi("'"|| info_ddname ||"'" FILE)
  1725 *-*  end
  1726 *-* else
       *-*  do
  1727 *-*   ldsi_rc       = 4
  1728 *-*  end
  1729 *-* select
  1730 *-* when ldsi_rc  =  0
       *-*  then
       *-*  do
  1731 *-*   info_dsname = sysdsname
  1732 *-*   info_node.0 = 5
  1733 *-*   remainder = info_dsname
  1734 *-*   do x = 1 to info_node.0
  1735 *-*    parse value remainder  with info_node.x '.' remainder
  1736 *-*    info_node.0 = x
  1737 *-*    if remainder == ''
       *-*     then
       *-*     leave
  1738 *-*   end
  1739 *-*  end   /* when ldsi_rc  == 0 then do    */
  1740 *-* when ldsi_rc  == 4
       *-*  then
       *-*  do
  1741 *-*   info_node.0 = 5
  1742 *-*   remainder = info_dsname
  1743 *-*   do x = 1 to info_node.0
  1744 *-*    parse value remainder  with info_node.x '.' remainder
  1745 *-*    info_node.0 = x
  1746 *-*    if remainder == ''
       *-*     then
       *-*     leave
  1747 *-*   end
  1748 *-*  end
  1749 *-* otherwise
       *-*  do
  1750 *-*   dispmsg = 'LISTDSI request failed for:' info_ddname 'with Reason code:' sysreason
  1751 *-*   x = message(dispmsg)
  1752 *-*  end
  1753 *-* end   /* select */
  1754 *-* say display_date 'TIME'(),        exec_name 'Started - Last update on' last_update,                 pgm_version 'by' pgm
_person 'from' info_ddname info_dsname
  1757 *-* say display_date 'TIME'() Start_Msg
  1758 *-* if mp1 \= "NOMSG"
       *-*  then
       *-*  do
  1759 *-*   nomsg = 1
  1760 *-*   say '                   ',        '        ' '           Running on CPC/CEC:' hwname  'PLEX:' sysplex,
              'Sysname:' sysname 'SMF-ID:' smfid
  1763 *-*   say '                   ',        '        ' '           OP Sys:' opsys 'MVS Rel:' mvsrel
  1765 *-*   say '                   ',        '        ' '           JES Node:' sys_node  'JES Lvl:' Sys_JES
  1767 *-*   say '                   ',        '        ' '           SMS:' sms 'DFPLVL:' dfp
  1769 *-*   say '                   ',        '        ' '           Jobname:' jobname 'JobID:' jobid 'Region:' regk ||'K'
  1771 *-*   say '                   ',        '        ' '           User ID:' userid() 'RACF Grp:' racfgrp,
        'Programmer Name:' prgnm
  1774 *-*  end
  1775 *-* else
       *-*  do
  1776 *-*   nomsg = 0
  1777 *-*  end
  1778 *-* if Sys_Env == 'FORE'
       *-*  then
       *-*  do
  1779 *-*   Environment = 'Foreground' symd_sldate
  1780 *-*  end
  1781 *-* else
       *-*  do
  1782 *-*   Environment = 'Batch'
  1783 *-*   prefix      = info_node.1
  1784 *-*  end
  1785 *-* if nomsg
       *-*  then
       *-*  do
  1786 *-*   say display_date 'TIME'() exec_name 'Running in' Environment
  1787 *-*   say display_date 'TIME'() exec_name 'Working Environment Prefix:' prefix
  1788 *-*  end
  1789 *-* etime = 'TIME'('E')   /* Bypass the time() function in this program */
  1790 *-* /* say 'Start_Message: Elapsed time=' etime       */
  1792 *-* return(0)   /* start_message:                                                    */
  1793 *-* /*                                                                                 */
  1794 *-* message:
  1795 *-* current_routine = "message:"
  1796 *-* say 'LISTDSI request failed for:' info_ddname 'with Reason code:' sysreason
  1797 *-* say '   Listdsi Message 1:' sysmsglvl1
  1798 *-* say '   Listdsi Message 2:' sysmsglvl2
  1799 *-* /*  */
  1800 *-* return(0)   /* message:                                                           */
  1802 *-* /*                      */
  1803 *-* end_message:
  1804 *-* current_routine = "end_message:"
  1805 *-* parse arg high_rc
  1806 *-* end_msg = 'End_message 2019-05-02 01.25 RWSUHR'
  1807 *-* if high_rc = ''
       *-*  then
       *-*  high_rc = 0
  1808 *-* if datatype(high_rc,"NUM")
       *-*  then
       *-*  do
  1809 *-*   say display_date time() exec_name translate(format(High_RC,2,0),"0"," ")  'Ended - RC=' High_rc
  1810 *-*  end
  1811 *-* else
       *-*  do
  1812 *-*   say  display_date time() exec_name 'Invalid Return Code:' high_rc
  1813 *-*   say  display_date time() exec_name 'Terminating, rc=16'
  1814 *-*   high_rc = 16
  1815 *-*   signal error_exit_rtn
  1816 *-*  end
  1817 *-* if (Sys_Env == 'FORE')
       *-*  then
       *-*  do
  1818 *-*   NOP
  1819 *-*  end
  1820 *-* else
       *-*  do
  1821 *-*   /* "FREE DA('"|| prefix ||".VBREXX.EXEC')"         */
  1823 *-*  end
  1824 *-* return(High_rc)
  1826 *-* /*                                                            */
  1827 *-* initialize:
  1828 *-* current_routine = "initialize:"
  1829 *-* /* xtrc = trace("?I")                                                  */
  1830 *-* parse upper arg parameters
  1831 *-* nxtrc         = trace("N")
  1832 *-* xtrc          = trace(nxtrc)
  1833 *-* parmix        = words(parameters)
  1834 *-* alloc_msgs.   = ""
  1835 *-* delete_msgs.  = ""
  1836 *-* alloc_msgs.0  = 0
  1837 *-* delete_msgs.0 = 0
  1838 *-* xtrce         = "O"
  1839 *-* debug         = ""
  1840 *-* database      = "ACC"
  1841 *-* verbose       = ""
  1842 *-* trace_option  = verbose
  1843 *-* if parmix > 3
       *-*  then
       *-*  do
  1844 *-*   say member_name ||": max number of 3 arguments exceeded! Number="|| translate(format(parmix,2,0),"0"," ")
  1845 *-*   say member_name ||": Valid arguments are: ACCESS | DB2 VERBOSE, and DEBUG"
  1846 *-*   high_rc = 16
  1847 *-*   signal error_exit_rtn
  1848 *-*  end   /* if parmix > 3 then do   */
  1849 *-* if parmix > 0
       *-*  then
       *-*  do
  1850 *-*   do pix = 1 to parmix
  1851 *-*    argument = word(parameters,pix)
  1852 *-*    upper argument
  1853 *-*    /* say member_name ||": Arguments given " argument      */
  1854 *-*    verbose  = ""
  1855 *-*    select
  1856 *-*    when argument  = "VERBOSE"
       *-*     then
       *-*     do
  1857 *-*      verbose      = "VERBOSE"
  1858 *-*      trace_option = "VERBOSE"
  1859 *-*     end   /* when argument = "VERBOSE" then do */
  1860 *-*    when argument  = "DEBUG"
       *-*     then
       *-*     do
  1861 *-*      debug        = argument
  1862 *-*     end   /* when argument  = "DEBUG" then do */
  1863 *-*    when argument  = "DB2"
       *-*     then
       *-*     do
  1864 *-*      database = "DB2"
  1865 *-*     end   /* when argument = "DB2"  then do */
  1866 *-*    when abbrev(argument,"ACC")
       *-*     then
       *-*     do
  1867 *-*      database     = "ACC"
  1868 *-*     end   /* when argument = "ACCESS" then do */
  1869 *-*    otherwise
       *-*     do
  1870 *-*      Invalid argument: argument
  1871 *-*      high_rc = 16
  1872 *-*      signal error_exit_rtn
  1873 *-*     end   /* when argument = "ACCESS" then do */
  1874 *-*    end   /* select                         */
  1875 *-*   end   /* do n = 1 to arg()    */
  1876 *-*  end   /* if arg() > 0 then do */
  1877 *-* else
       *-*  do
  1878 *-*   say member_name ||": No arguments given."
  1879 *-*  end   /* else do - if arg() > 0 then do */
  1880 *-* xtrc = trace("O")  /*                                              */
  1881 *-* return(0)   /* initialize: procedure expose member_name database debug verbose xtrc   */
  1883 *-* /*                                                                                      */
  1885 *-* /*                                                                  */
  1886 *-* check_rexxtools:
  1887 *-* current_routine = "check_rexxtools:"
  1888 *-* rxtools_rc = 32
  1889 *-* rxt_rc     = rxquery()         /* Make sure the REXXTOOLs environment is available                                */
  1890 *-* hcenv      = address()
  1891 *-* /* xtrc = trace(xtrc)                                                  */
  1892 *-* /* Load REXXTOOLS environments                                        */
  1893 *-* if  rxt_rc = 0
       *-*  then
       *-*  do
  1894 *-*   call rxaddhst "ADD" "IDCAMS"
  1895 *-*   call rxaddhst "ADD" "REXXTOOL"
  1896 *-*   say display_date time() exec_name "REXXTOOLS product appears to be available on CPC/CEC:" hwname sysname
  1897 *-*   rexxtools_available = 1
  1898 *-*   address rexxtool "OPTIONS NOMSGS"
  1899 *-*  end   /* if  rxt_rc = 0 then do   */
  1900 *-* else
       *-*  do
  1901 *-*   say display_date time() exec_name "REXXTOOLS product is NOT available on CPC/CEC:" hwname sysname
  1902 *-*   rexxtools_available = 0
  1903 *-*   /*  exit(16)     */
  1904 *-*  end   /* else do - if  rxt_rc = 0 then do        */
  1905 *-* address (hcenv)
  1906 *-* rxtools_rc      = rxt_rc
  1907 *-* /* xtrc = trace(xtrc)                                                  */
  1908 *-* return(rxtools_rc)   /* check_rexxtools: end                            */
  1910 *-* /*                                                                   */
  1911 *-* process_subselect:
  1912 *-* current_rountine = "process_subselect:"
  1914 *-* select   /* (2) lmmlist_option   */
  1916 *-* when lmmlist_option = "LIST"
       *-*  then
       *-*  do
  1917 *-*   msg_id     = "ISPLMMF1"
  1918 *-*   msg_header = rc_00_msg_LIST
  1919 *-*   call print_trace_line
  1920 *-*   print_trace_line_rc = RESULT
  1921 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1923 *-* when lmmlist_option = "FREE"
       *-*  then
       *-*  do
  1924 *-*   msg_id     = "ISPLMMF2"
  1925 *-*   msg_header = rc_00_msg_FREE
  1926 *-*   call print_trace_line
  1927 *-*   print_trace_line_rc = RESULT
  1928 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1930 *-* when lmmlist_option = "SAVE"
       *-*  then
       *-*  do
  1931 *-*   msg_id     = "ISPLMMF3"
  1932 *-*   msg_header = rc_00_msg_SAVE
  1933 *-*   call print_trace_line
  1934 *-*   print_trace_line_rc = RESULT
  1935 *-*  end   /* when lmmlist_option = "SAVE" then do  */
  1937 *-* otherwise
       *-*  do
  1938 *-*   msg_id     = "ISPLMMFE"
  1939 *-*   msg_header = "Undefined Error!"
  1940 *-*   call print_trace_line
  1941 *-*   print_trace_line_rc = RESULT
  1942 *-*   signal error_exit_rtn
  1943 *-*  end   /* when lmmlist_cmd_rc = 0 then do */
  1945 *-* end   /* select (2) lmmlist_option   */
  1947 *-* return(0)            /* process_subselect:                              */
  1949 *-* /* Error traps and exit routines                                     */
  1950 *-* /*                                                                   */
  1951 *-* /*                                                                   */
  1952 *-* error_exit_rtn:
  1953 *-* current_routine = "error_exit_rtn:"
  1954 *-* /* xtrc = trace("?I")                                                  */
  1955 *-* say "line #" sigl "LINE from which branch (SIGNAL) occurred."
  1956 *-* if high_rc < 12
       *-*  then
       *-*  do
  1957 *-*   High_rc = 12
  1958 *-*  end   /* if high_rc < 12 then do */
  1959 *-* say display_date time() exec_name "Error_exit: RC=" translate(format(high_rc,4,0),"0"," ")
  1960 *-* signal error_term_rtn
  1961 *-* exit(High_rc)
  1962 *-* /*                                                                   */
  1963 *-* trap_error_rtn:
  1964 *-* current_routine = "trap_error_rtn:"
  1965 *-* /* txrc = trace("O")                                                   */
  1966 *-* High_rc = 12
  1967 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                           "Instructio
n:" condition("D") "Status:" condition("S"),                           "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Me
ssages.)"
  1970 *-* say "RC   #" RC
  1971 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  1972 *-* signal error_exit_rtn
  1973 *-* exit(High_rc)
  1974 *-* /*                                                                   */
  1975 *-* trap_failure_rtn:
  1976 *-* current_routine = "trap_failure_rtn:"
  1977 *-* /* txrc = trace("O")                                                   */
  1978 *-* High_rc = 12
  1979 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  1982 *-* say "RC   #" RC
  1983 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  1984 *-* signal error_term_rtn
  1985 *-* exit(High_rc)
  1986 *-* /*                                                                   */
  1987 *-* trap_halt_rtn:
  1988 *-* current_routine = "trap_halt_rtn:"
  1989 *-* txrc = trace("O") /*                                                */
  1990 *-* High_rc = 1
  1991 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  1994 *-* say "RC   #" RC
  1995 *-* say "Halt_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  1996 *-* signal error_term_rtn
  1997 *-* exit(High_rc)
  1999 *-* /*                                                                   */
  2000 *-* trap_novalue_rtn:
  2001 *-* current_routine = "trap_novalue_rtn:"
  2002 *-* /* txrc = trace("O")                                                   */
  2003 *-* High_rc = 16
  2004 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2007 *-* say "RC   #" RC
  2008 *-* say "Novalue_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2009 *-* signal error_term_rtn
  2010 *-* exit(High_rc)
  2012 *-* /*                                                                   */
  2013 *-* trap_syntax_rtn:
  2014 *-* previous_routine = current_routine
  2015 *-* current_routine = "trap_syntax_rtn:"
  2016 *-* /* txrc = trace("O")                                                   */
  2017 *-* trap_rc = RC
  2018 *-* say "trap_syntax_rtn:" "line #" sigl "Condition Name:(" condition("C") ") Description:("  condition("I"),
          ") Instruction:(" condition("D") ") Status:" condition("S"),                         ") Error Message text:(" ERRORTEXT(h
igh_rc) ") (see z/OS TSO/E Messages.)"
  2021 *-* say "                " "RC   #" trap_rc
  2022 *-* high_rc = high_rc = high_rc + trap_rc
  2023 *-* say "                " "High_RC=" translate(format(high_rc,2,0),"0"," ")
  2024 *-* signal error_term_rtn
  2025 *-* exit(High_rc)
  2029 *-* /*                      */
  2030 *-* end_message:
  2031 *-* current_routine = "end_message:"
  2032 *-* parse arg high_rc
  2033 *-* end_msg = 'End_message 2019-05-02 01.25 RWSUHR'
  2034 *-* if high_rc = ''
       *-*  then
       *-*  high_rc = 0
  2035 *-* if datatype(high_rc,"NUM")
       *-*  then
       *-*  do
  2036 *-*   say display_date time() exec_name translate(format(High_RC,2,0),"0"," ")  'Ended - RC=' High_rc
  2037 *-*  end
  2038 *-* else
       *-*  do
  2039 *-*   say  display_date time() exec_name 'Invalid Return Code:' high_rc
  2040 *-*   say  display_date time() exec_name 'Terminating, rc=16'
  2041 *-*   high_rc = 16
  2042 *-*   signal error_exit_rtn
  2043 *-*  end
  2044 *-* if (Sys_Env == 'FORE')
       *-*  then
       *-*  do
  2045 *-*   NOP
  2046 *-*  end
  2047 *-* else
       *-*  do
  2048 *-*   /* "FREE DA('"|| prefix ||".VBREXX.EXEC')"         */
  2050 *-*  end
  2051 *-* return(High_rc)
  2053 *-* /*                                                                  */
  2054 *-* check_rexxtools:
  2055 *-* current_routine = "check_rexxtools:"
  2056 *-* rxtools_rc = 32
  2057 *-* rxt_rc     = rxquery()         /* Make sure the REXXTOOLs environment is available                                */
  2058 *-* hcenv      = address()
  2059 *-* /* xtrc = trace(xtrc)                                                  */
  2060 *-* /* Load REXXTOOLS environments                                        */
  2061 *-* if  rxt_rc = 0
       *-*  then
       *-*  do
  2062 *-*   call rxaddhst "ADD" "IDCAMS"
  2063 *-*   call rxaddhst "ADD" "REXXTOOL"
  2064 *-*   say display_date time() exec_name "REXXTOOLS product appears to be available on CPC/CEC:" hwname sysname
  2065 *-*   rexxtools_available = 1
  2066 *-*   address rexxtool "OPTIONS NOMSGS"
  2067 *-*  end   /* if  rxt_rc = 0 then do   */
  2068 *-* else
       *-*  do
  2069 *-*   say display_date time() exec_name "REXXTOOLS product is NOT available on CPC/CEC:" hwname sysname
  2070 *-*   rexxtools_available = 0
  2071 *-*   /*  exit(16)     */
  2072 *-*  end   /* else do - if  rxt_rc = 0 then do        */
  2073 *-* address (hcenv)
  2074 *-* rxtools_rc      = rxt_rc
  2075 *-* /* xtrc = trace(xtrc)                                                  */
  2076 *-* return(rxtools_rc)   /* check_rexxtools: end                            */
  2078 *-* /* Error traps and exit routines                                    */
  2079 *-* /*                                                                  */
  2080 *-* /*                                                                   */
  2081 *-* error_exit_rtn:
  2082 *-* current_routine = "error_exit_rtn:"
  2083 *-* /* xtrc = trace("?I")                                                  */
  2084 *-* say ">>> error_exit_rtn: "
  2085 *-* say "line #" sigl "LINE from which branch (SIGNAL) occurred."
  2086 *-* if high_rc < 12
       *-*  then
       *-*  do
  2087 *-*   High_rc = 12
  2088 *-*  end   /* if high_rc < 12 then do */
  2089 *-* say display_date time() exec_name "Error_exit: RC=" translate(format(high_rc,4,0),"0"," ")
  2090 *-* signal error_term_rtn
  2091 *-* exit(High_rc)
  2093 *-* /*                                                                   */
  2094 *-* trap_error_rtn:
  2095 *-* current_routine = "trap_error_rtn:"
  2096 *-* say ">>> trap_error_rtn: "
  2097 *-* /* txrc = trace("O")                                                   */
  2098 *-* High_rc = 12
  2099 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                           "Instructio
n:" condition("D") "Status:" condition("S"),                           "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Me
ssages.)"
  2102 *-* say "RC   #" RC
  2103 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2104 *-* signal error_exit_rtn
  2105 *-* exit(High_rc)
  2106 *-* /*                                                                   */
  2107 *-* trap_failure_rtn:
  2108 *-* current_routine = "trap_failure_rtn:"
  2109 *-* say ">>> trap_failure_rtn: "
  2110 *-* /* txrc = trace("O")                                                   */
  2111 *-* High_rc = 12
  2112 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2115 *-* say "RC   #" RC
  2116 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2117 *-* signal error_term_rtn
  2118 *-* exit(High_rc)
  2120 *-* /*                                                                   */
  2121 *-* trap_halt_rtn:
  2122 *-* current_routine = "trap_halt_rtn:"
  2123 *-* say ">>> trap_halt_rtn:    "
  2124 *-* txrc = trace("O") /*                                                */
  2125 *-* High_rc = 1
  2126 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2129 *-* say "RC   #" RC
  2130 *-* say "Halt_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2131 *-* signal error_term_rtn
  2132 *-* exit(High_rc)
  2134 *-* /*                                                                   */
  2135 *-* trap_novalue_rtn:
  2136 *-* current_routine = "trap_novalue_rtn:"
  2137 *-* say ">>> trap_novalue_rtn: "
  2138 *-* /* txrc = trace("O")                                                   */
  2139 *-* High_rc = 16
  2140 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2143 *-* say "RC   #" RC
  2144 *-* say "Novalue_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2145 *-* signal error_term_rtn
  2146 *-* exit(High_rc)
  2148 *-* /*                                                                                 */
  2149 *-* isp_alloc_rtn:
  2150 *-* parse upper arg argument
  2151 *-* current_routine = "isp_alloc_rtn:"
  2152 *-* /* xtrc = trace("?I")                                                  */
  2153 *-* apf_data_set = word(argument,1)
  2154 *-* high_rc = 0
  2155 *-* /* xtrc = trace("?I")                                                  */
  2156 *-* hcenv = address()
  2157 *-* if rexxtools_available
       *-*  then
       *-*  do
  2158 *-*   address "REXXTOOL"
  2159 *-*  end   /* if rexxtools_available then do */
  2160 *-* else
       *-*  do
  2161 *-*   address "TSO"
  2162 *-*  end   /* else do - if rexxtools_available then do */
  2163 *-* ispddn    = "ISPAPFL0"
  2164 *-* isp_alloc_cmd     = "'ALLOC F("|| ispddn ||")  DATASET(''"|| apf_data_set ||"'') SHR REUSE'"
  2165 *-* isp_alloc_cmd_say = remquote(isp_alloc_cmd)
  2166 *-* interpret isp_alloc_cmd
  2167 *-* isp_alloc_cmd_rc = RC
  2168 *-* if rexxtools_available
       *-*  then
       *-*  do
  2169 *-*   call process_rexxtools_alloc_rc_rtn isp_alloc_cmd_rc
  2170 *-*   isp_alloc_cmd_rc = RESULT
  2171 *-*  end   /* if rexxtools_available then do */
  2172 *-* else
       *-*  do
  2173 *-*   call process_tso_alloc_rc_rtn isp_alloc_cmd_rc
  2174 *-*   isp_alloc_cmd_rc = RESULT
  2175 *-*  end   /* else do - if rexxtools_available then do */
  2176 *-* /* say msg_header "ISPALC00" isp_alloc_cmd_say                           */
  2177 *-* high_rc = max(isp_alloc_cmd_rc,high_rc)
  2178 *-* xtrc = trace(xtrc) /*                                               */
  2179 *-* address (hcenv)
  2180 *-* return(high_rc)    /* process_cols_rtn */
  2184 *-* /* Start_Message: Version 02.07 2020-05-06 RWSUHR                    */
  2185 *-* /*                                                                                 */
  2186 *-* message:
  2187 *-* current_routine = "message:"
  2188 *-* say 'LISTDSI request failed for:' info_ddname 'with Reason code:' sysreason
  2189 *-* say '   Listdsi Message 1:' sysmsglvl1
  2190 *-* say '   Listdsi Message 2:' sysmsglvl2
  2191 *-* /*  */
  2192 *-* return(0)
  2194 *-* /*                      */
  2195 *-* end_message:
  2196 *-* current_routine = "end_message:"
  2197 *-* parse arg high_rc
  2198 *-* end_msg = 'End_message 2019-05-02 01.25 RWSUHR'
  2199 *-* if high_rc = ''
       *-*  then
       *-*  high_rc = 0
  2200 *-* if datatype(high_rc,"NUM")
       *-*  then
       *-*  do
  2201 *-*   say display_date time() exec_name translate(format(High_RC,2,0),"0"," ")  'Ended - RC=' High_rc
  2202 *-*  end
  2203 *-* else
       *-*  do
  2204 *-*   say  display_date time() exec_name 'Invalid Return Code:' high_rc
  2205 *-*   say  display_date time() exec_name 'Terminating, rc=16'
  2206 *-*   high_rc = 16
  2207 *-*   signal error_exit_rtn
  2208 *-*  end
  2209 *-* if (Sys_Env == 'FORE')
       *-*  then
       *-*  do
  2210 *-*   NOP
  2211 *-*  end
  2212 *-* else
       *-*  do
  2213 *-*   /* "FREE DA('"|| prefix ||".VBREXX.EXEC')"         */
  2215 *-*  end
  2216 *-* return(High_rc)
  2218 *-* /*                                                                  */
  2219 *-* check_rexxtools:
  2220 *-* current_routine = "check_rexxtools:"
  2221 *-* rxtools_rc = 32
  2222 *-* rxt_rc     = rxquery()         /* Make sure the REXXTOOLs environment is available                                */
  2223 *-* hcenv      = address()
  2224 *-* /* xtrc = trace(xtrc)                                                  */
  2225 *-* /* Load REXXTOOLS environments                                        */
  2226 *-* if  rxt_rc = 0
       *-*  then
       *-*  do
  2227 *-*   call rxaddhst "ADD" "IDCAMS"
  2228 *-*   call rxaddhst "ADD" "REXXTOOL"
  2229 *-*   say display_date time() exec_name "REXXTOOLS product appears to be available on CPC/CEC:" hwname sysname
  2230 *-*   rexxtools_available = 1
  2231 *-*   address rexxtool "OPTIONS NOMSGS"
  2232 *-*  end   /* if  rxt_rc = 0 then do   */
  2233 *-* else
       *-*  do
  2234 *-*   say display_date time() exec_name "REXXTOOLS product is NOT available on CPC/CEC:" hwname sysname
  2235 *-*   rexxtools_available = 0
  2236 *-*   /*  exit(16)     */
  2237 *-*  end   /* else do - if  rxt_rc = 0 then do        */
  2238 *-* address (hcenv)
  2239 *-* rxtools_rc      = rxt_rc
  2240 *-* /* xtrc = trace(xtrc)                                                  */
  2241 *-* return(rxtools_rc)   /* check_rexxtools: end                            */
  2243 *-* /* Error traps and exit routines                                    */
  2244 *-* /*                                                                  */
  2245 *-* /*                                                                   */
  2246 *-* error_exit_rtn:
  2247 *-* current_routine = "error_exit_rtn:"
  2248 *-* /* xtrc = trace("?I")                                                  */
  2249 *-* say ">>> error_exit_rtn: "
  2250 *-* say "line #" sigl "LINE from which branch (SIGNAL) occurred."
  2251 *-* if high_rc < 12
       *-*  then
       *-*  do
  2252 *-*   High_rc = 12
  2253 *-*  end   /* if high_rc < 12 then do */
  2254 *-* say display_date time() exec_name "Error_exit: RC=" translate(format(high_rc,4,0),"0"," ")
  2255 *-* signal error_term_rtn
  2256 *-* exit(High_rc)
  2257 *-* /*                                                                   */
  2258 *-* trap_error_rtn:
  2259 *-* current_routine = "trap_error_rtn:"
  2260 *-* say ">>> trap_error_rtn: "
  2261 *-* /* txrc = trace("O")                                                   */
  2262 *-* High_rc = 12
  2263 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                           "Instructio
n:" condition("D") "Status:" condition("S"),                           "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Me
ssages.)"
  2266 *-* say "RC   #" RC
  2267 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2268 *-* signal error_exit_rtn
  2269 *-* exit(High_rc)
  2270 *-* /*                                                                   */
  2271 *-* trap_failure_rtn:
  2272 *-* current_routine = "trap_failure_rtn:"
  2273 *-* say ">>> trap_failure_rtn: "
  2274 *-* /* txrc = trace("O")                                                   */
  2275 *-* High_rc = 12
  2276 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2279 *-* say "RC   #" RC
  2280 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2281 *-* signal error_term_rtn
  2282 *-* exit(High_rc)
  2283 *-* /*                                                                   */
  2284 *-* trap_halt_rtn:
  2285 *-* current_routine = "trap_halt_rtn:"
  2286 *-* say ">>> trap_halt_rtn:    "
  2287 *-* txrc = trace("O") /*                                                */
  2288 *-* High_rc = 1
  2289 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2292 *-* say "RC   #" RC
  2293 *-* say "Halt_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2294 *-* signal error_term_rtn
  2295 *-* exit(High_rc)
  2296 *-* /*                                                                   */
  2297 *-* trap_novalue_rtn:
  2298 *-* current_routine = "trap_novalue_rtn:"
  2299 *-* say ">>> trap_novalue_rtn: "
  2300 *-* /* txrc = trace("O")                                                   */
  2301 *-* High_rc = 16
  2302 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2305 *-* say "RC   #" RC
  2306 *-* say "Novalue_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2307 *-* signal error_term_rtn
  2308 *-* exit(High_rc)
  2311 *-* /*                                                                                 */
  2312 *-* isp_alloc_rtn:
  2313 *-* parse upper arg argument
  2314 *-* current_routine = "isp_alloc_rtn:"
  2315 *-* /* xtrc = trace("?I")                                                  */
  2316 *-* apf_data_set = word(argument,1)
  2317 *-* high_rc = 0
  2318 *-* /* xtrc = trace("?I")                                                  */
  2319 *-* hcenv = address()
  2320 *-* if rexxtools_available
       *-*  then
       *-*  do
  2321 *-*   address "REXXTOOL"
  2322 *-*  end   /* if rexxtools_available then do */
  2323 *-* else
       *-*  do
  2324 *-*   address "TSO"
  2325 *-*  end   /* else do - if rexxtools_available then do */
  2326 *-* ispddn    = "ISPAPFL0"
  2327 *-* isp_alloc_cmd     = "'ALLOC F("|| ispddn ||")  DATASET(''"|| apf_data_set ||"'') SHR REUSE'"
  2328 *-* isp_alloc_cmd_say = remquote(isp_alloc_cmd)
  2329 *-* interpret isp_alloc_cmd
  2330 *-* isp_alloc_cmd_rc = RC
  2331 *-* if rexxtools_available
       *-*  then
       *-*  do
  2332 *-*   call process_rexxtools_alloc_rc_rtn isp_alloc_cmd_rc
  2333 *-*   isp_alloc_cmd_rc = RESULT
  2334 *-*  end   /* if rexxtools_available then do */
  2335 *-* else
       *-*  do
  2336 *-*   call process_tso_alloc_rc_rtn isp_alloc_cmd_rc
  2337 *-*   isp_alloc_cmd_rc = RESULT
  2338 *-*  end   /* else do - if rexxtools_available then do */
  2339 *-* /* say msg_header "ISPALC00" isp_alloc_cmd_say                           */
  2340 *-* high_rc = max(isp_alloc_cmd_rc,high_rc)
  2341 *-* xtrc = trace(xtrc) /*                                               */
  2342 *-* address (hcenv)
  2343 *-* return(high_rc)    /* process_cols_rtn */
  2345 *-* /*                                                                  */
  2346 *-* check_rexxtools:
  2347 *-* current_routine = "check_rexxtools:"
  2348 *-* rxtools_rc = 32
  2349 *-* rxt_rc     = rxquery()         /* Make sure the REXXTOOLs environment is available                                */
  2350 *-* hcenv      = address()
  2351 *-* /* xtrc = trace(xtrc)                                                  */
  2352 *-* /* Load REXXTOOLS environments                                        */
  2353 *-* if  rxt_rc = 0
       *-*  then
       *-*  do
  2354 *-*   call rxaddhst "ADD" "IDCAMS"
  2355 *-*   call rxaddhst "ADD" "REXXTOOL"
  2356 *-*   say display_date time() exec_name "REXXTOOLS product appears to be available on CPC/CEC:" hwname sysname
  2357 *-*   rexxtools_available = 1
  2358 *-*   address rexxtool "OPTIONS NOMSGS"
  2359 *-*  end   /* if  rxt_rc = 0 then do   */
  2360 *-* else
       *-*  do
  2361 *-*   say display_date time() exec_name "REXXTOOLS product is NOT available on CPC/CEC:" hwname sysname
  2362 *-*   rexxtools_available = 0
  2363 *-*   /*  exit(16)     */
  2364 *-*  end   /* else do - if  rxt_rc = 0 then do        */
  2365 *-* address (hcenv)
  2366 *-* rxtools_rc      = rxt_rc
  2367 *-* /* xtrc = trace(xtrc)                                                  */
  2368 *-* return(rxtools_rc)   /* check_rexxtools: end                            */
  2370 *-* /* Error traps and exit routines                                    */
  2371 *-* /*                                                                  */
  2372 *-* /*                                                                   */
  2373 *-* error_exit_rtn:
  2374 *-* current_routine = "error_exit_rtn:"
  2375 *-* /* xtrc = trace("?I")                                                  */
  2376 *-* say ">>> error_exit_rtn: "
  2377 *-* say "line #" sigl "LINE from which branch (SIGNAL) occurred."
  2378 *-* if high_rc < 12
       *-*  then
       *-*  do
  2379 *-*   High_rc = 12
  2380 *-*  end   /* if high_rc < 12 then do */
  2381 *-* say display_date time() exec_name "Error_exit: RC=" translate(format(high_rc,4,0),"0"," ")
  2382 *-* signal error_term_rtn
  2383 *-* exit(High_rc)
  2384 *-* /*                                                                   */
  2385 *-* trap_error_rtn:
  2386 *-* current_routine = "trap_error_rtn:"
  2387 *-* say ">>> trap_error_rtn: "
  2388 *-* /* txrc = trace("O")                                                   */
  2389 *-* High_rc = 12
  2390 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                           "Instructio
n:" condition("D") "Status:" condition("S"),                           "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Me
ssages.)"
  2393 *-* say "RC   #" RC
  2394 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2395 *-* signal error_exit_rtn
  2396 *-* exit(High_rc)
  2397 *-* /*                                                                   */
  2398 *-* trap_failure_rtn:
  2399 *-* current_routine = "trap_failure_rtn:"
  2400 *-* say ">>> trap_failure_rtn: "
  2401 *-* /* txrc = trace("O")                                                   */
  2402 *-* High_rc = 12
  2403 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2406 *-* say "RC   #" RC
  2407 *-* say "Failure_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2408 *-* signal error_term_rtn
  2409 *-* exit(High_rc)
  2410 *-* /*                                                                   */
  2411 *-* trap_halt_rtn:
  2412 *-* current_routine = "trap_halt_rtn:"
  2413 *-* say ">>> trap_halt_rtn:    "
  2414 *-* txrc = trace("O") /*                                                */
  2415 *-* High_rc = 1
  2416 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2419 *-* say "RC   #" RC
  2420 *-* say "Halt_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2421 *-* signal error_term_rtn
  2422 *-* exit(High_rc)
  2423 *-* /*                                                                   */
  2424 *-* trap_novalue_rtn:
  2425 *-* current_routine = "trap_novalue_rtn:"
  2426 *-* say ">>> trap_novalue_rtn: "
  2427 *-* /* txrc = trace("O")                                                   */
  2428 *-* High_rc = 16
  2429 *-* say "line #" sigl "Condition Name:" condition("C") "Description:"  condition("I"),                    "Instruction:" con
dition("D") "Status:" condition("S"),                    "Error Message text:" ERRORTEXT(high_rc) "(see z/OS TSO/E Messages.)"
  2432 *-* say "RC   #" RC
  2433 *-* say "Novalue_trap_rtn: RC=" translate(format(high_rc,2,0),"0"," ")
  2434 *-* signal error_term_rtn
  2435 *-* exit(High_rc)
  2437 *-* /*                                                                   */
  2438 *-* close_and_free_all:
  2439 *-* call isp_lmclose_rtn ispapfid
  2440 *-* exec_lmclose_rtn_rc = RESULT
  2441 *-* call isp_lmfree_rtn ispapfid
  2442 *-* exec_lmfree_rtn_rc  = RESULT
  2443 *-* high_rc = max(exec_lmclose_rtn_rc,exec_lmfree_rtn_rc,high_rc)
  2444 *-* return(high_rc)
  2446 *-* /*                                                                   */
  2447 *-* msg_term_rtn:
  2448 *-* current_routine = "msg_term_rtn:"
  2449 *-* /* txrc = trace("O")                                                   */
  2450 *-* say "Last Routine:" current_routine
  2451 *-* /* xtrc = trace("?I")                                                  */
  2452 *-* if open_flag
       *-*  then
       *-*  do
  2453 *-*   call close_and_free_all
  2454 *-*  end   /* if open_flag then do             */
  2455 *-* signal error_term_rtn
  2457 *-* /*                                                                   */
  2458 *-* error_term_rtn:
  2459 *-* /* xtrc = trace("?I")                                                  */
  2460 *-* say "Last Routine:" current_routine
  2461 *-* current_routine = "error_term_rtn:"
  2462 *-* /* txrc = trace("O")                                                   */
  2463 *-* /* xtrc = trace("?I")                                                  */
  2464 *-* if open_flag
       *-*  then
       *-*  do
  2465 *-*   call close_and_free_all
  2466 *-*  end   /* if open_flag then do             */
  2467 *-* ZISPFRC = high_rc
  2468 *-* address "ISPEXEC" "VPUT (ZISPFRC) SHARED"
  2469 *-* exit(high_rc)
  2471 *-* /*                                                       */
  2472 *-* print_trace_line:
       *-* procedure expose msg_id msg_header l_msg_header msg_text msg_id,                                   xtrc trace_option cur
rent_routine high_rc,                                   display_date exec_name csv_lineix csv_line. csv_line.0 csv_lrecl
  2475 *-* /*                                                       */
  2476 *-* previous_routine = current_routine
  2477 *-* current_routine  = "print_trace_line:"
  2478 *-* /* say ">>>>" current_routine previous_routine               */
  2479 *-* /* xtrc = trace("?I")                                                  */
  2480 *-* SIGNAL OFF SYNTAX
  2481 *-* /* say ">>>>>" previous_routine msg_header msg_id msg_text   */
  2482 *-* if (trace_option = "VERBOSE")
       *-*  then
       *-*  do
  2483 *-*   msg_header       = display_date time() exec_name translate(format(high_rc,2,0),"0"," ")
  2484 *-*   l_msg_header     = length(msg_header)
  2485 *-*   if (msg_id = "")
       *-*    then
       *-*    do
  2486 *-*     msg_id   = "CHKAPFG9"
  2487 *-*     message  = msg_id "Generic trace message."
  2488 *-*    end   /* if (msg_id = "") then do         */
  2489 *-*   else
       *-*    do
  2490 *-*     message = msg_header msg_id msg_text
  2491 *-*     nop
  2492 *-*    end   /* else do - if (msg_id = "") then do      */
  2493 *-*   say message
  2494 *-*  end   /* if (trace_option = "VERBOSE") then do */
  2495 *-* else
       *-*  do
  2496 *-*   message = msg_header msg_id msg_text
  2497 *-*   nop
  2498 *-*  end   /* else do - if (trace_option = "VERBOSE") then do */
  2499 *-* /*  xtrc = trace("O")                              */
  2501 *-* return(0)   /* print_trace_line:                                                     */
  2502 *-* /*                                                       */
  2503 *-* /* *** end of program ***                                */
  2504 *-* /*                                                       */
READY
END


 ------------ now xreference begins -----------------------
 ------------ now xreference begins -----------------------


    xref (1 of 2) section 1 is for variables (not stem.'s)
    xref (1 of 2) section 1 is for variables (not stem.'s)
    ----------------------------------------------------------

       variables/labels are in "upperCase" if variable was never
                       assigned a value.

                        they are in "lowercase", otherwise.

       variables/stems set via a command, like EXECIO for
                       example, where the stem is within quotes
                       will not be shown in the xref as either
                       an assignment or a reference.

       Note special variables like:  RC, SIGL, can be assigned
                       values explictly.  But rexx can set them
                       as well implicitly.  Implicit assignments
                       are not in the xref.
    ----------------------------------------------------------



Built-In+/External use  'TIME'                                             Reference: F(1652) F(1754) F(1757) F(1786) F(1787) F(1789)

Built-In+/External use  ABBREV                                             Reference: F(1866)

Built-In+/External use  ADDRESS                                            Reference: F(58) F(124) F(237) F(374) F(389) F(821) F(950) F(1014)
                        ...                                                           F(1043) F(1070) F(1092) F(1479) F(1510) F(1890) F(2058)
                        ...                                                           F(2156) F(2223) F(2319) F(2350)

Address Envir.Constant: ADDRESS "IDCAMS"                                   Reference: 138

Address Envir.Constant: ADDRESS "ISPEXEC"                                  Reference: 951 1015 1044 1071 1093

Address Envir.Constant: ADDRESS "REXXTOOL"                                 Reference: 128 175 827 1481 1512 2158 2321

Address Envir.Constant: ADDRESS "REXXTOOLS"                                Reference: 375

Address Envir.Constant: ADDRESS "TSO"                                      Reference: 178 390 582 832 1484 1515 2161 2324

Address Envir.Constant: ADDRESS '(HCENV)'                                  Reference: 195 249 379 394 844 1002 1029 1056 1080 1102 1502 1534 1905
                        ...                                                           2073 2179 2238 2342 2365

Address Envir.Constant: ADDRESS 'ISPEXEC' <cmd>                            Reference: 108 2468

Address Envir.Constant: ADDRESS 'REXXTOOL' <cmd>                           Reference: 1898 2066 2231 2358

Address Envir.Constant: ADDRESS 'SDSF' <cmd>                               Reference: 1591

Variable (set w/rexx)   address_rc                                         Assigned : 139 250 376 380 391 395 1016 1030 1045 1057 1094 1103
Variable (used in/rexx) address_rc                                         Reference: 140 173

Label (internal label)  ADD_LINE_TO_CSV                                    Defined  : 848
Label (int. label ref)  ADD_LINE_TO_CSV                                    Reference: C(841)

Variable (set w/rexx)   add_line_to_csv_rc                                 Assigned : 842
Variable (NEVER USED)   add_line_to_csv_rc                                 No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   alloc_cmd_rc                                       Assigned : 403 439
Variable (used in/rexx) alloc_cmd_rc                                       Reference: 404 408 412 416 422 428 440 444 448 456 461 464 473 479 483

Variable (set w/rexx)   alloc_csv_cmd                                      Assigned : 182
Variable (used in/rexx) alloc_csv_cmd                                      Reference: 183 184

Variable (set w/rexx)   alloc_csv_cmd_rc                                   Assigned : 185
Variable (used in/rexx) alloc_csv_cmd_rc                                   Reference: 186 188 192

Label (internal label)  ALLOC_CSV_FILE                                     Defined  : 113
Label (int. label ref)  ALLOC_CSV_FILE                                     Reference: C(306)

Variable (set w/rexx)   alloc_csv_file_rc                                  Assigned : 307
Variable (NEVER USED)   alloc_csv_file_rc                                  No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   alloc_dcb                                          Assigned : 122
Variable (used in/rexx) alloc_dcb                                          Reference: 182

Variable (set w/rexx)   alloc_parm                                         Assigned : 121
Variable (used in/rexx) alloc_parm                                         Reference: 182

Variable (set w/rexx)   alloc_rc                                           Assigned : 353
Variable (NEVER USED)   alloc_rc                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   apf_data_set                                       Assigned : 719 770 811 1477 2153 2316
Variable (used in/rexx) apf_data_set                                       Reference: 720 772 775 809 1072 1487 2164 2327
Variable (used in/rexx) apf_data_set                                       Expose Ref: 763

Variable (set w/rexx)   argument                                           Assigned : 116 202 235 257 288 346 359 372 387 402 438 490 529 768 823
                        ...                                                           851 941 1010 1038 1065 1086 1111 1179 1226 1281 1431 1474
                        ...                                                           1507 1635 1636 1851 1852 2150 2313
Variable (used in/rexx) argument                                           Reference: 117 203 236 258 289 347 360 373 388 403 439 491 530 770 824
                        ...                                                           852 942 1011 1039 1040 1066 1067 1087 1089 1112 1180 1227
                        ...                                                           1282 1432 1477 1636 1637 1856 1860 1861 1863 1866 1870 2153
                        ...                                                           2316

Variable (set w/rexx)   arguments                                          Assigned : 75
Variable (used in/rexx) arguments                                          Reference: 76

Variable (set w/rexx)   arg_ispapfid                                       Assigned : 1011
Variable (NEVER USED)   arg_ispapfid                                       No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   atrk                                               Assigned : 120
Variable (used in/rexx) atrk                                               Reference: 121

Variable (set w/rexx)   change_sysid                                       Assigned : 63
Variable (NEVER USED)   change_sysid                                       No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  CHECK_EXECIO_RC                                    Defined  : 255
Label (int. label ref)  CHECK_EXECIO_RC                                    Reference:

Variable (set w/rexx)   check_rexxtools                                    Assigned : 94
Variable (NEVER USED)   check_rexxtools                                    No Ref.  : If actually referenced, it must be via a cmd.
Label (internal label)  CHECK_REXXTOOLS                                    Defined  : 1886 ///Dup. IGNORED LABEL def's: 2054 2219 2346
Label (int. label ref)  CHECK_REXXTOOLS                                    Reference: C(93)

Variable (set w/rexx)   check_rexxtools_hcenv_rc                           Assigned : 135
Variable (NEVER USED)   check_rexxtools_hcenv_rc                           No Ref.  : If actually referenced, it must be via a cmd.
Label (internal label)  CHECK_REXXTOOLS_HCENV_RC                           Defined  : 200
Label (int. label ref)  CHECK_REXXTOOLS_HCENV_RC                           Reference: C(134)

Variable (set w/rexx)   chk_options_rc                                     Assigned : 203
Variable (used in/rexx) chk_options_rc                                     Reference: 205 206 208 209 211 212 214 215 218 219 221 222 226

Label (internal label)  CLOSE_AND_FREE_ALL                                 Defined  : 2438
Label (int. label ref)  CLOSE_AND_FREE_ALL                                 Reference: C(2453) C(2465)

Built-In+/External use  CLS                                                Reference: F(1720)

Variable (set w/rexx)   cmd                                                Assigned : 1637
Variable (used in/rexx) cmd                                                Reference: 1638

Variable (set w/rexx)   cmd_say                                            Assigned : 1638 1642 1645
Variable (used in/rexx) cmd_say                                            Reference: 1640 1642 1643 1645

Variable (set w/rexx)   cmd_string                                         Assigned : 409 413 417 426 445 449 457 465 477 497 501 505 509 518 536
                        ...                                                           540 544 548 557
Variable (used in/rexx) cmd_string                                         Reference: 410 414 418 427 446 450 458 466 478 498 502 506 510 519 537
                        ...                                                           541 545 549 558 588

Variable (set w/rexx)   column1                                            Assigned : 692
Variable (used in/rexx) column1                                            Reference: 702

Variable (set w/rexx)   column2                                            Assigned : 693
Variable (used in/rexx) column2                                            Reference: 702

Variable (set w/rexx)   column3                                            Assigned : 694
Variable (used in/rexx) column3                                            Reference: 702

Variable (set w/rexx)   columns                                            Assigned : 695
Variable (used in/rexx) columns                                            Reference: 700

Variable (set w/rexx)   col_ix                                             Assigned : 699 717 734
Variable (used in/rexx) col_ix                                             Reference: 700 749 872
Variable (used in/rexx) col_ix                                             Expose Ref: 763
Variable (in Stem Set)  col_ix                                             Assigned : 871
Variable (in Stem Ref)  col_ix                                             Reference: 718 719

Variable (set w/rexx)   comma                                              Assigned : 319
Variable (used in/rexx) comma                                              Reference: 900
Variable (used in/rexx) comma                                              Expose Ref: 628

Built-In+/External use  CONDITION                                          Reference: F(1967) F(1979) F(1991) F(2004) F(2018) F(2099) F(2112)
                        ...                                                           F(2126) F(2140) F(2263) F(2276) F(2289) F(2302) F(2390)
                        ...                                                           F(2403) F(2416) F(2429)

Label (internal label)  CREATE_CSV_FILE                                    Defined  : 303
Label (int. label ref)  CREATE_CSV_FILE                                    Reference: C(103)

Variable (set w/rexx)   create_csv_file_rc                                 Assigned : 104
Variable (NEVER USED)   create_csv_file_rc                                 No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   csv_ddname                                         Assigned : 117 236 289 305
Variable (used in/rexx) csv_ddname                                         Reference: 182 238 290 306 308 310

Variable (set w/rexx)   csv_dsname                                         Assigned : 118 119
Variable (used in/rexx) csv_dsname                                         Reference: 125 146 153 182

Variable (set w/rexx)   csv_lineix                                         Assigned : 338 852 854
Variable (used in/rexx) csv_lineix                                         Reference: 841 854 859
Variable (used in/rexx) csv_lineix                                         Expose Ref: 628 763 2472
Variable (in Stem Set)  csv_lineix                                         Assigned : 855

Variable (set w/rexx)   csv_line_new                                       Assigned : 838 840
Variable (used in/rexx) csv_line_new                                       Reference: 840 841

Variable (set w/rexx)   csv_lrecl                                          Assigned : 339 857
Variable (used in/rexx) csv_lrecl                                          Reference: 122 856
Variable (used in/rexx) csv_lrecl                                          Expose Ref: 628 763 2472

Variable (set w/rexx)   current_rountine                                   Assigned : 1912
Variable (NEVER USED)   current_rountine                                   No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   current_routine                                    Assigned : 55 114 201 233 256 287 304 316 345 358 371 386 401 436 489
                        ...                                                           528 567 579 631 681 714 731 743 769 820 849 865 880 909 920
                        ...                                                           938 1009 1036 1064 1088 1109 1177 1224 1279 1429 1475 1508
                        ...                                                           1539 1632 1651 1795 1804 1828 1887 1953 1964 1976 1988 2001
                        ...                                                           2015 2031 2055 2082 2095 2108 2122 2136 2151 2187 2196 2220
                        ...                                                           2247 2259 2272 2285 2298 2314 2347 2374 2386 2399 2412 2425
                        ...                                                           2448 2461 2477
Variable (used in/rexx) current_routine                                    Reference: 819 937 2014 2450 2460 2476
Variable (used in/rexx) current_routine                                    Expose Ref: 2472

Variable (set w/rexx)   customer                                           Assigned : 1693
Variable (NEVER USED)   customer                                           No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  D2PIC                                              Reference: F(828)

Variable (set w/rexx)   database                                           Assigned : 1840 1864 1867
Variable (NEVER USED)   database                                           No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  DATATYPE                                           Reference: F(889) F(1808) F(2035) F(2200)

Built-In+/External use  DATE                                               Reference: F(1677) F(1715)

Variable (set w/rexx)   ddname                                             Assigned : 347 360 373 388
Variable (used in/rexx) ddname                                             Reference: 350 363 377 392

Variable (set w/rexx)   debug                                              Assigned : 1839 1861
Variable (used in/rexx) debug                                              Reference: 643 1561 1656 1657
Variable (used in/rexx) debug                                              Expose Ref: 628

Variable (set w/rexx)   delcsv_cmd                                         Assigned : 125 142 180
Variable (used in/rexx) delcsv_cmd                                         Reference: 126 141 144 145 146 148 151 152 153 155 158 159 160 162 167
                        ...                                                           179

Variable (set w/rexx)   delcsv_cmd_say                                     Assigned : 126
Variable (used in/rexx) delcsv_cmd_say                                     Reference: 145 152 159

Built-In+/External use  DELSTR                                             Reference: F(703) F(1642)

Variable (set w/rexx)   dfp                                                Assigned : 1702
Variable (used in/rexx) dfp                                                Reference: 1767

Variable (set w/rexx)   display_date                                       Assigned : 1715
Variable (used in/rexx) display_date                                       Reference: 145 146 148 152 153 155 159 160 162 167 173 186 206 209 212
                        ...                                                           215 219 222 226 243 247 261 264 267 271 276 280 295 298 405
                        ...                                                           441 493 532 587 641 683 948 969 1012 1041 1068 1090 1113
                        ...                                                           1182 1229 1284 1298 1434 1603 1754 1757 1786 1787 1809 1812
                        ...                                                           1813 1896 1901 1959 2036 2039 2040 2064 2069 2089 2201 2204
                        ...                                                           2205 2229 2234 2254 2356 2361 2381 2483
Variable (used in/rexx) display_date                                       Expose Ref: 628 763 2472

Variable (set w/rexx)   display_time                                       Assigned : 324
Variable (NEVER USED)   display_time                                       No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   dispmsg                                            Assigned : 1750
Variable (used in/rexx) dispmsg                                            Reference: 1751

Variable (set w/rexx)   dis_date                                           Assigned : 325
Variable (NEVER USED)   dis_date                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   dis_proc                                           Assigned : 322
Variable (NEVER USED)   dis_proc                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   dis_time                                           Assigned : 326
Variable (NEVER USED)   dis_time                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   dquote                                             Assigned : 318
Variable (used in/rexx) dquote                                             Reference: 896
Variable (used in/rexx) dquote                                             Expose Ref: 628

Variable (set w/rexx)   dsn_pref                                           Assigned : 1570 1573
Variable (NEVER USED)   dsn_pref                                           No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  DUMMY_RTN                                          Defined  : 566
Label (int. label ref)  DUMMY_RTN                                          Reference:

Variable (set w/rexx)   empty_library                                      Assigned : 328 723 1309
Variable (NEVER USED)   empty_library                                      No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  END_MESSAGE                                        Defined  : 1803 ///Dup. IGNORED LABEL def's: 2030 2195
Label (int. label ref)  END_MESSAGE                                        Reference: C(106)

Variable (set w/rexx)   end_msg                                            Assigned : 1806 2033 2198
Variable (NEVER USED)   end_msg                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   entity                                             Assigned : 321
Variable (NEVER USED)   entity                                             No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   environment                                        Assigned : 1779 1782
Variable (used in/rexx) environment                                        Reference: 1786

Built-In+/External use  ERRORTEXT                                          Reference: F(1967) F(1979) F(1991) F(2004) F(2018) F(2099) F(2112)
                        ...                                                           F(2126) F(2140) F(2263) F(2276) F(2289) F(2302) F(2390)
                        ...                                                           F(2403) F(2416) F(2429)

Label (internal label)  ERROR_EXIT_RTN                                     Defined  : 1952 ///Dup. IGNORED LABEL def's: 2081 2246 2373
Label (int. label ref)  ERROR_EXIT_RTN                                     Reference: S(423) S(429) S(462) S(474) S(480) S(515) S(521) S(554)
                        ...                                                           S(560) S(974) S(1125) S(1132) S(1147) S(1154) S(1161)
                        ...                                                           S(1168) S(1194) S(1201) S(1208) S(1215) S(1242) S(1249)
                        ...                                                           S(1256) S(1263) S(1270) S(1327) S(1334) S(1350) S(1366)
                        ...                                                           S(1374) S(1382) S(1389) S(1415) S(1420) S(1446) S(1453)
                        ...                                                           S(1460) S(1466) S(1606) S(1815) S(1847) S(1872) S(1942)
                        ...                                                           S(1972) S(2042) S(2104) S(2207) S(2268) S(2395)

Label (internal label)  ERROR_TERM_RTN                                     Defined  : 2458
Label (int. label ref)  ERROR_TERM_RTN                                     Reference: S(1960) S(1984) S(1996) S(2009) S(2024) S(2090) S(2117)
                        ...                                                           S(2131) S(2145) S(2255) S(2281) S(2294) S(2307) S(2382)
                        ...                                                           S(2408) S(2421) S(2434) S(2455)

Variable (set w/rexx)   etime                                              Assigned : 1789
Variable (NEVER USED)   etime                                              No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   execio_cmd                                         Assigned : 238
Variable (used in/rexx) execio_cmd                                         Reference: 239 240

Variable (set w/rexx)   execio_cmd_rc                                      Assigned : 241
Variable (used in/rexx) execio_cmd_rc                                      Reference: 242 243 247

Variable (set w/rexx)   execio_cmd_say                                     Assigned : 239
Variable (NEVER USED)   execio_cmd_say                                     No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   execio_rc                                          Assigned : 258
Variable (used in/rexx) execio_rc                                          Reference: 260 261 263 264 266 267 270 271 275 276 280

Variable (set w/rexx)   exec_lmclose_rtn_rc                                Assigned : 2440
Variable (used in/rexx) exec_lmclose_rtn_rc                                Reference: 2443

Variable (set w/rexx)   exec_lmfree_rtn_rc                                 Assigned : 2442
Variable (used in/rexx) exec_lmfree_rtn_rc                                 Reference: 2443

Variable (set w/rexx)   exec_name                                          Assigned : 1676
Variable (used in/rexx) exec_name                                          Reference: 145 146 148 152 153 155 159 160 162 167 173 186 206 209 212
                        ...                                                           215 219 222 226 243 247 261 264 267 271 276 280 295 298 322
                        ...                                                           405 441 493 532 587 641 683 948 969 1012 1041 1068 1090 1113
                        ...                                                           1182 1229 1284 1298 1434 1603 1754 1786 1787 1809 1812 1813
                        ...                                                           1896 1901 1959 2036 2039 2040 2064 2069 2089 2201 2204 2205
                        ...                                                           2229 2234 2254 2356 2361 2381 2483
Variable (used in/rexx) exec_name                                          Expose Ref: 628 763 2472

Variable (NEVER SET)    FILE                                               Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) FILE                                               Reference: 1724

Variable (set w/rexx)   file_record                                        Assigned : 689 914 930
Variable (used in/rexx) file_record                                        Reference: 896 900 914 930

Variable (set w/rexx)   first_record                                       Assigned : 690 702 703
Variable (used in/rexx) first_record                                       Reference: 702 703

Variable (set w/rexx)   first_time                                         Assigned : 697 867
Variable (NEVER USED)   first_time                                         No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  FORMAT                                             Reference: F(145) F(146) F(148) F(152) F(153) F(155) F(159) F(160)
                        ...                                                           F(162) F(167) F(173) F(186) F(206) F(209) F(212) F(215)
                        ...                                                           F(219) F(222) F(226) F(243) F(247) F(261) F(264) F(267)
                        ...                                                           F(271) F(276) F(280) F(295) F(298) F(405) F(441) F(493)
                        ...                                                           F(532) F(587) F(948) F(969) F(1012) F(1041) F(1068) F(1090)
                        ...                                                           F(1113) F(1182) F(1229) F(1284) F(1298) F(1434) F(1603)
                        ...                                                           F(1809) F(1844) F(1959) F(1971) F(1983) F(1995) F(2008)
                        ...                                                           F(2023) F(2036) F(2089) F(2103) F(2116) F(2130) F(2144)
                        ...                                                           F(2201) F(2254) F(2267) F(2280) F(2293) F(2306) F(2381)
                        ...                                                           F(2394) F(2407) F(2420) F(2433) F(2483)

Label (internal label)  FORMAT_RESULT_LINE                                 Defined  : 818
Label (int. label ref)  FORMAT_RESULT_LINE                                 Reference: C(809)

Variable (set w/rexx)   free_cmd                                           Assigned : 290 377 392 583
Variable (used in/rexx) free_cmd                                           Reference: 291 292 584 587

Variable (set w/rexx)   free_cmd_rc                                        Assigned : 293 378 393 491 530 585
Variable (used in/rexx) free_cmd_rc                                        Reference: 294 295 298 381 396 492 496 500 504 508 514 520 531 535 539
                        ...                                                           543 547 553 559 586 587

Variable (set w/rexx)   free_cmd_say                                       Assigned : 291
Variable (NEVER USED)   free_cmd_say                                       No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  FREE_CSV_FILE                                      Defined  : 286
Label (int. label ref)  FREE_CSV_FILE                                      Reference: C(310)

Variable (set w/rexx)   free_csv_file_rc                                   Assigned : 311
Variable (NEVER USED)   free_csv_file_rc                                   No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  FREE_DSN                                           Defined  : 578
Label (int. label ref)  FREE_DSN                                           Reference:

Variable (set w/rexx)   free_rc                                            Assigned : 366 381 396
Variable (NEVER USED)   free_rc                                            No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  GETGRPN                                            Reference: F(1711)

Built-In+/External use  GETJOBID                                           Reference: F(1710)

Built-In+/External use  GETPRGNM                                           Reference: F(1712)

Built-In+/External use  GETREGK                                            Reference: F(1713)

Variable (set w/rexx)   hcenv                                              Assigned : 124 237 374 389 821 950 1014 1043 1070 1092 1479 1510 1890
                        ...                                                           2058 2156 2223 2319 2350
Variable (NEVER USED)   hcenv                                              No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   high_rc                                            Assigned : 105 340 404 422 428 440 461 473 479 483 492 514 520 531 553
                        ...                                                           559 968 979 1001 1028 1055 1079 1101 1124 1131 1146 1153
                        ...                                                           1160 1167 1171 1181 1193 1200 1207 1214 1218 1228 1241 1248
                        ...                                                           1255 1262 1269 1273 1283 1310 1342 1349 1365 1373 1381 1388
                        ...                                                           1404 1409 1414 1433 1445 1452 1459 1465 1500 1532 1605 1805
                        ...                                                           1807 1814 1846 1871 1957 1966 1978 1990 2003 2022 2032 2034
                        ...                                                           2041 2087 2098 2111 2125 2139 2154 2177 2197 2199 2206 2252
                        ...                                                           2262 2275 2288 2301 2317 2340 2379 2389 2402 2415 2428 2443
Variable (used in/rexx) high_rc                                            Reference: 105 106 107 353 366 381 396 404 405 422 428 440 441 461 473
                        ...                                                           479 483 492 493 514 520 531 532 553 559 948 968 969 979 1001
                        ...                                                           1012 1028 1041 1055 1068 1079 1090 1101 1113 1124 1131 1146
                        ...                                                           1153 1160 1167 1171 1182 1193 1200 1207 1214 1218 1228 1229
                        ...                                                           1241 1248 1255 1262 1269 1273 1283 1284 1298 1310 1342 1349
                        ...                                                           1365 1373 1381 1388 1404 1409 1414 1433 1434 1445 1452 1459
                        ...                                                           1465 1807 1808 1809 1812 1956 1959 1967 1971 1979 1983 1991
                        ...                                                           1995 2004 2008 2018 2022 2023 2034 2035 2036 2039 2086 2089
                        ...                                                           2099 2103 2112 2116 2126 2130 2140 2144 2177 2199 2200 2201
                        ...                                                           2204 2251 2254 2263 2267 2276 2280 2289 2293 2302 2306 2340
                        ...                                                           2378 2381 2390 2394 2403 2407 2416 2420 2429 2433 2443 2467
                        ...                                                           2483
Variable (used in/rexx) high_rc                                            Expose Ref: 628 763 1631 2472

Variable (set w/rexx)   hrdwname                                           Assigned : 1709
Variable (NEVER USED)   hrdwname                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   hwname                                             Assigned : 1708
Variable (used in/rexx) hwname                                             Reference: 1569 1760 1896 1901 2064 2069 2229 2234 2356 2361

Variable (set w/rexx)   i1                                                 Assigned : 1655
Variable (used in/rexx) i1                                                 Reference: 1667

Variable (set w/rexx)   i2                                                 Assigned : 1655
Variable (used in/rexx) i2                                                 Reference: 1668

Variable (set w/rexx)   i3                                                 Assigned : 1655
Variable (used in/rexx) i3                                                 Reference: 1669 1676

Variable (set w/rexx)   i4                                                 Assigned : 1655
Variable (used in/rexx) i4                                                 Reference: 1670

Variable (set w/rexx)   i5                                                 Assigned : 1655
Variable (used in/rexx) i5                                                 Reference: 1671

Variable (set w/rexx)   i6                                                 Assigned : 1655
Variable (used in/rexx) i6                                                 Reference: 1672

Variable (set w/rexx)   i7                                                 Assigned : 1655
Variable (used in/rexx) i7                                                 Reference: 1673

Variable (set w/rexx)   i8                                                 Assigned : 1655
Variable (used in/rexx) i8                                                 Reference: 1674

Variable (set w/rexx)   i9                                                 Assigned : 1655
Variable (used in/rexx) i9                                                 Reference: 1675

Variable (set w/rexx)   info                                               Assigned : 59 1654
Variable (used in/rexx) info                                               Reference: 1655

Variable (set w/rexx)   info_addrenv                                       Assigned : 1674
Variable (NEVER USED)   info_addrenv                                       No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   info_ddname                                        Assigned : 1670
Variable (used in/rexx) info_ddname                                        Reference: 1723 1724 1750 1754 1796 2188

Variable (set w/rexx)   info_dsname                                        Assigned : 1671 1731
Variable (used in/rexx) info_dsname                                        Reference: 1733 1742 1754

Variable (set w/rexx)   info_env                                           Assigned : 1667
Variable (NEVER USED)   info_env                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   info_hostenv                                       Assigned : 1673
Variable (NEVER USED)   info_hostenv                                       No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   info_name                                          Assigned : 1669
Variable (NEVER USED)   info_name                                          No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   info_type                                          Assigned : 1668
Variable (used in/rexx) info_type                                          Reference: 1717

Variable (set w/rexx)   info_u1                                            Assigned : 1672
Variable (NEVER USED)   info_u1                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   info_u2                                            Assigned : 1675
Variable (NEVER USED)   info_u2                                            No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  INITIALIZE                                         Defined  : 1827
Label (int. label ref)  INITIALIZE                                         Reference: C(76)

Variable (set w/rexx)   initialize_rc                                      Assigned : 77
Variable (NEVER USED)   initialize_rc                                      No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   int_time                                           Assigned : 323
Variable (used in/rexx) int_time                                           Reference: 324 326

Variable (NEVER SET)    INVALID                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) INVALID                                            Reference: 1870

Built-In+/External use  ISFCALLS                                           Reference: F(1555) F(1625)

Variable (set w/rexx)   isfcols                                            Assigned : 1619
Variable (NEVER USED)   isfcols                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   isfdcols                                           Assigned : 1620
Variable (NEVER USED)   isfdcols                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   isfdest                                            Assigned : 1579
Variable (NEVER USED)   isfdest                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    ISFMSG                                             Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ISFMSG                                             Reference: 650 651
Variable (used in/rexx) ISFMSG                                             Expose Ref: 628

Variable (set w/rexx)   isfowner                                           Assigned : 1576
Variable (NEVER USED)   isfowner                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   isfprefix                                          Assigned : 1575
Variable (NEVER USED)   isfprefix                                          No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    ISFROWS                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ISFROWS                                            Reference: 1609

Variable (set w/rexx)   isfsysname                                         Assigned : 1577
Variable (NEVER USED)   isfsysname                                         No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   ispapfid                                           Assigned : 942 1087
Variable (used in/rexx) ispapfid                                           Reference: 781 795 802 805 955 1017 1046 1095 1141 1290 1291 1292 1293
                        ...                                                           1307 1314 1323 1326 1330 1333 1346 1354 1370 1380 1408 1413
                        ...                                                           2439 2441

Variable (set w/rexx)   ispddn                                             Assigned : 1486 1517 2163 2326
Variable (used in/rexx) ispddn                                             Reference: 1487 1518 2164 2327

Variable (set w/rexx)   ispf                                               Assigned : 1694
Variable (NEVER USED)   ispf                                               No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   ispf_table_rc                                      Assigned : 68
Variable (NEVER USED)   ispf_table_rc                                      No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   isp_alloc_cmd                                      Assigned : 1487 2164 2327
Variable (used in/rexx) isp_alloc_cmd                                      Reference: 1488 1489 2165 2166 2328 2329

Variable (set w/rexx)   isp_alloc_cmd_rc                                   Assigned : 1490 1493 1497 2167 2170 2174 2330 2333 2337
Variable (used in/rexx) isp_alloc_cmd_rc                                   Reference: 1492 1496 1500 1532 2169 2173 2177 2332 2336 2340

Variable (set w/rexx)   isp_alloc_cmd_say                                  Assigned : 183 1488 2165 2328
Variable (used in/rexx) isp_alloc_cmd_say                                  Reference: 186 409 413 417 426 445 449 457 465 477

Label (internal label)  ISP_ALLOC_RTN                                      Defined  : 1473 ///Dup. IGNORED LABEL def's: 2149 2312
Label (int. label ref)  ISP_ALLOC_RTN                                      Reference: C(772)

Variable (set w/rexx)   isp_alloc_rtn_rc                                   Assigned : 773
Variable (used in/rexx) isp_alloc_rtn_rc                                   Reference: 774

Variable (set w/rexx)   isp_free_cmd                                       Assigned : 1518
Variable (used in/rexx) isp_free_cmd                                       Reference: 1519 1520

Variable (set w/rexx)   isp_free_cmd_rc                                    Assigned : 1521 1524 1528
Variable (used in/rexx) isp_free_cmd_rc                                    Reference: 1523 1527

Variable (set w/rexx)   isp_free_cmd_say                                   Assigned : 1519
Variable (used in/rexx) isp_free_cmd_say                                   Reference: 497 501 505 509 518 536 540 544 548 557

Label (internal label)  ISP_FREE_RTN                                       Defined  : 1506
Label (int. label ref)  ISP_FREE_RTN                                       Reference: C(805)

Variable (set w/rexx)   isp_free_rtn_rc                                    Assigned : 806
Variable (NEVER USED)   isp_free_rtn_rc                                    No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  ISP_LMCLOSE_RTN                                    Defined  : 1035
Label (int. label ref)  ISP_LMCLOSE_RTN                                    Reference: C(802) C(2439)

Variable (set w/rexx)   isp_lmclose_rtn_rc                                 Assigned : 803
Variable (NEVER USED)   isp_lmclose_rtn_rc                                 No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  ISP_LMFREE_RTN                                     Defined  : 1084
Label (int. label ref)  ISP_LMFREE_RTN                                     Reference: C(2441)

Label (internal label)  ISP_LMINIT_RTN                                     Defined  : 1062
Label (int. label ref)  ISP_LMINIT_RTN                                     Reference: C(775)

Variable (set w/rexx)   isp_lminit_rtn_rc                                  Assigned : 776
Variable (used in/rexx) isp_lminit_rtn_rc                                  Reference: 777

Label (internal label)  ISP_LMMLIST_RTN                                    Defined  : 935
Label (int. label ref)  ISP_LMMLIST_RTN                                    Reference: C(781) C(795)

Variable (set w/rexx)   isp_lmmlist_rtn_rc                                 Assigned : 782 796
Variable (used in/rexx) isp_lmmlist_rtn_rc                                 Reference: 786

Label (internal label)  ISP_LMOPEN_RTN                                     Defined  : 1007
Label (int. label ref)  ISP_LMOPEN_RTN                                     Reference: C(778)

Variable (set w/rexx)   isp_lmopen_rtn_rc                                  Assigned : 779
Variable (used in/rexx) isp_lmopen_rtn_rc                                  Reference: 780

Variable (set w/rexx)   ix                                                 Assigned : 644
Variable (in Stem Ref)  ix                                                 Reference: 645

Variable (set w/rexx)   jobid                                              Assigned : 1710
Variable (used in/rexx) jobid                                              Reference: 1714 1769

Variable (set w/rexx)   jobid_short                                        Assigned : 1714
Variable (NEVER USED)   jobid_short                                        No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   jobname                                            Assigned : 1707
Variable (used in/rexx) jobname                                            Reference: 1769

Variable (set w/rexx)   last_update                                        Assigned : 60
Variable (used in/rexx) last_update                                        Reference: 1754

Variable (set w/rexx)   ldsi_rc                                            Assigned : 1724 1727
Variable (used in/rexx) ldsi_rc                                            Reference: 1730 1740

Built-In+/External use  LEFT                                               Reference: F(409) F(413) F(417) F(426) F(445) F(449) F(457) F(465)
                        ...                                                           F(477) F(497) F(501) F(505) F(509) F(518) F(536) F(540)
                        ...                                                           F(544) F(548) F(557) F(810) F(828) F(833) F(838) F(944)

Built-In+/External use  LENGTH                                             Reference: F(406) F(442) F(494) F(533) F(642) F(684) F(703) F(856)
                        ...                                                           F(857) F(896) F(900) F(924) F(949) F(970) F(1013) F(1042)
                        ...                                                           F(1069) F(1091) F(1114) F(1183) F(1230) F(1285) F(1299)
                        ...                                                           F(1435) F(1705) F(1714) F(2484)

Variable (set w/rexx)   libcol                                             Assigned : 789
Variable (used in/rexx) libcol                                             Reference: 790

Variable (set w/rexx)   libcols                                            Assigned : 788
Variable (used in/rexx) libcols                                            Reference: 789

Variable (set w/rexx)   librow                                             Assigned : 336 787 1025
Variable (used in/rexx) librow                                             Reference: 787

Variable (set w/rexx)   librow_cols                                        Assigned : 784
Variable (used in/rexx) librow_cols                                        Reference: 785 788 790

Variable (set w/rexx)   librow_fields                                      Assigned : 793
Variable (NEVER USED)   librow_fields                                      No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   line                                               Assigned : 852 853
Variable (used in/rexx) line                                               Reference: 853 855 856 857

Built-In+/External use  LINESIZE                                           Reference: F(409) F(413) F(417) F(426) F(445) F(449) F(457) F(465)
                        ...                                                           F(477) F(497) F(501) F(505) F(509) F(518) F(536) F(540)
                        ...                                                           F(544) F(548) F(557)

Variable (NEVER SET)    LISTDD                                             Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) LISTDD                                             Reference: 583

Built-In+/External use  LISTDSI                                            Reference: F(1724)

Variable (set w/rexx)   list_name                                          Assigned : 1589
Variable (used in/rexx) list_name                                          Reference: 685 1591 1601 1603

Variable (set w/rexx)   lix                                                Assigned : 419 467 511 550 1588
Variable (in Stem Ref)  lix                                                Reference: 1589

Variable (set w/rexx)   lmclose_cmd                                        Assigned : 1046
Variable (used in/rexx) lmclose_cmd                                        Reference: 1047 1048

Variable (set w/rexx)   lmclose_cmd_rc                                     Assigned : 1039 1049
Variable (used in/rexx) lmclose_cmd_rc                                     Reference: 1050 1055 1181

Variable (set w/rexx)   lmclose_cmd_say                                    Assigned : 1047
Variable (used in/rexx) lmclose_cmd_say                                    Reference: 1190 1197 1204 1211

Variable (set w/rexx)   lmclose_rc                                         Assigned : 1180
Variable (used in/rexx) lmclose_rc                                         Reference: 1185 1189 1193 1196 1200 1203 1207 1214 1218

Variable (set w/rexx)   lmfree_cmd                                         Assigned : 1095
Variable (used in/rexx) lmfree_cmd                                         Reference: 1096 1097

Variable (set w/rexx)   lmfree_cmd_rc                                      Assigned : 1098 1432
Variable (used in/rexx) lmfree_cmd_rc                                      Reference: 1099 1101 1433

Variable (set w/rexx)   lmfree_cmd_say                                     Assigned : 1096
Variable (used in/rexx) lmfree_cmd_say                                     Reference: 1442 1449 1456

Variable (set w/rexx)   lminit_cmd                                         Assigned : 1072
Variable (used in/rexx) lminit_cmd                                         Reference: 1073 1074

Variable (set w/rexx)   lminit_cmd_rc                                      Assigned : 1066 1075
Variable (used in/rexx) lminit_cmd_rc                                      Reference: 1076 1079 1228 1437 1441 1448 1455

Variable (set w/rexx)   lminit_cmd_say                                     Assigned : 1073
Variable (used in/rexx) lminit_cmd_say                                     Reference: 1237 1245 1252 1259 1266

Variable (set w/rexx)   lminit_rc                                          Assigned : 1227
Variable (used in/rexx) lminit_rc                                          Reference: 1232 1236 1241 1244 1248 1251 1255 1258 1262 1269 1273 1445
                        ...                                                           1452 1459 1465

Variable (set w/rexx)   lmmlist_cmd                                        Assigned : 955
Variable (used in/rexx) lmmlist_cmd                                        Reference: 957 958

Variable (set w/rexx)   lmmlist_cmd_rc                                     Assigned : 959 1282
Variable (used in/rexx) lmmlist_cmd_rc                                     Reference: 960 976 1001 1283 1289 1306 1310 1313 1342 1345 1349 1353
                        ...                                                           1365 1369 1373 1377 1381 1388 1404 1409 1414

Variable (set w/rexx)   lmmlist_cmd_say                                    Assigned : 957
Variable (used in/rexx) lmmlist_cmd_say                                    Reference: 962 1314 1354 1370 1378

Variable (set w/rexx)   lmmlist_option                                     Assigned : 942 1282
Variable (used in/rexx) lmmlist_option                                     Reference: 952 955 971 976 982 1322 1323 1325 1326 1329 1330 1400 1407
                        ...                                                           1408 1412 1413 1916 1923 1930

Variable (set w/rexx)   lmmlist_pass                                       Assigned : 332 945
Variable (used in/rexx) lmmlist_pass                                       Reference: 943 945
Variable (used in/rexx) lmmlist_pass                                       Expose Ref: 763

Variable (set w/rexx)   lmopen_cmd                                         Assigned : 1017
Variable (used in/rexx) lmopen_cmd                                         Reference: 1018 1019

Variable (set w/rexx)   lmopen_cmd_rc                                      Assigned : 1020
Variable (used in/rexx) lmopen_cmd_rc                                      Reference: 1021 1028

Variable (set w/rexx)   lmopen_cmd_say                                     Assigned : 1018
Variable (used in/rexx) lmopen_cmd_say                                     Reference: 1121 1128 1135 1150 1157 1164

Variable (set w/rexx)   lmopen_rc                                          Assigned : 1112
Variable (used in/rexx) lmopen_rc                                          Reference: 1116 1120 1124 1127 1131 1134 1146 1149 1153 1156 1160 1167
                        ...                                                           1171

Variable (set w/rexx)   lrc                                                Assigned : 1592
Variable (used in/rexx) lrc                                                Reference: 1602 1603

Variable (set w/rexx)   l_max                                              Assigned : 687
Variable (NEVER USED)   l_max                                              No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   l_msg_header                                       Assigned : 406 442 494 533 642 684 949 970 1013 1042 1069 1091 1114
                        ...                                                           1183 1230 1285 1299 1435 2484
Variable (used in/rexx) l_msg_header                                       Reference: 409 413 417 426 445 449 457 465 477 497 501 505 509 518 536
                        ...                                                           540 544 548 557 949 970 1013 1042 1069 1091
Variable (used in/rexx) l_msg_header                                       Expose Ref: 2472

Variable (set w/rexx)   l_record                                           Assigned : 686
Variable (NEVER USED)   l_record                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   l_temp                                             Assigned : 688
Variable (NEVER USED)   l_temp                                             No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  MAX                                                Reference: F(105) F(353) F(366) F(381) F(396) F(404) F(422) F(428)
                        ...                                                           F(440) F(461) F(473) F(479) F(483) F(492) F(514) F(520)
                        ...                                                           F(531) F(553) F(559) F(968) F(979) F(1001) F(1028) F(1055)
                        ...                                                           F(1079) F(1101) F(1124) F(1131) F(1146) F(1153) F(1160)
                        ...                                                           F(1167) F(1171) F(1193) F(1200) F(1207) F(1214) F(1218)
                        ...                                                           F(1228) F(1241) F(1248) F(1255) F(1262) F(1269) F(1273)
                        ...                                                           F(1283) F(1310) F(1342) F(1349) F(1365) F(1373) F(1381)
                        ...                                                           F(1388) F(1404) F(1409) F(1414) F(1433) F(1445) F(1452)
                        ...                                                           F(1459) F(1465) F(1500) F(1532) F(1626) F(2177) F(2340)
                        ...                                                           F(2443)

Variable (set w/rexx)   mbrname                                            Assigned : 333 810 944
Variable (used in/rexx) mbrname                                            Reference: 793 962
Variable (used in/rexx) mbrname                                            Expose Ref: 763

Variable (set w/rexx)   mbr_auth_count                                     Assigned : 335 813 985
Variable (used in/rexx) mbr_auth_count                                     Reference: 809 985
Variable (used in/rexx) mbr_auth_count                                     Expose Ref: 763

Variable (set w/rexx)   mbr_count                                          Assigned : 334 812 983
Variable (used in/rexx) mbr_count                                          Reference: 809 983
Variable (used in/rexx) mbr_count                                          Expose Ref: 763

Variable (NEVER SET)    MEMBER                                             Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) MEMBER                                             Expose Ref: 763

Variable (set w/rexx)   member_name                                        Assigned : 64
Variable (used in/rexx) member_name                                        Reference: 1657 1844 1845 1878

Variable (set w/rexx)   message                                            Assigned : 2487 2490 2496
Variable (used in/rexx) message                                            Reference: 2493
Label (internal label)  MESSAGE                                            Defined  : 1794 ///Dup. IGNORED LABEL def's: 2186
Label (int. label ref)  MESSAGE                                            Reference: F(1751)

Variable (set w/rexx)   message_ind                                        Assigned : 1658 1661
Variable (NEVER USED)   message_ind                                        No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   message_line                                       Assigned : 828 833
Variable (NEVER USED)   message_line                                       No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   mp1                                                Assigned : 1653
Variable (used in/rexx) mp1                                                Reference: 1758

Built-In+/External use  MSG                                                Reference: F(137) F(581) F(590)

Label (internal label)  MSGRTN                                             Defined  : 628
Label (int. label ref)  MSGRTN                                             Reference: C(1601)

Variable (set w/rexx)   msg_header                                         Assigned : 405 441 493 532 641 683 948 969 1012 1041 1068 1090 1113
                        ...                                                           1182 1229 1284 1298 1434 1918 1925 1932 1939 2483
Variable (used in/rexx) msg_header                                         Reference: 406 410 414 418 427 442 446 450 453 454 458 460 466 472 478
                        ...                                                           494 498 502 506 510 519 533 537 541 545 549 558 588 642 645
                        ...                                                           651 684 685 971 1114 1121 1123 1128 1130 1135 1141 1142 1143
                        ...                                                           1144 1145 1150 1152 1157 1159 1164 1166 1183 1190 1192 1197
                        ...                                                           1199 1204 1206 1211 1213 1230 1237 1240 1245 1247 1252 1254
                        ...                                                           1259 1261 1266 1268 1285 1299 1308 1314 1323 1326 1330 1333
                        ...                                                           1346 1348 1354 1360 1361 1362 1363 1364 1370 1372 1378 1380
                        ...                                                           1387 1408 1413 1435 1442 1449 1456 1464 2484 2490 2496
Variable (used in/rexx) msg_header                                         Expose Ref: 2472

Variable (set w/rexx)   msg_id                                             Assigned : 825 961 1296 1917 1924 1931 1938 2486
Variable (used in/rexx) msg_id                                             Reference: 828 833 2485 2487 2490 2496
Variable (used in/rexx) msg_id                                             Expose Ref: 2472

Label (internal label)  MSG_TERM_RTN                                       Defined  : 2447
Label (int. label ref)  MSG_TERM_RTN                                       Reference:

Variable (set w/rexx)   msg_text                                           Assigned : 962 1297
Variable (used in/rexx) msg_text                                           Reference: 2490 2496
Variable (used in/rexx) msg_text                                           Expose Ref: 2472

Variable (set w/rexx)   mvsrel                                             Assigned : 1700
Variable (used in/rexx) mvsrel                                             Reference: 1763

Built-In+/External use  MVSVAR                                             Reference: F(1695) F(1696) F(1697) F(1698) F(1699) F(1700) F(1701)
                        ...                                                           F(1702) F(1703) F(1707) F(1708) F(1709)

Variable (NEVER SET)    NAME                                               Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) NAME                                               Expose Ref: 763

Variable (set w/rexx)   newix                                              Assigned : 330 866
Variable (NEVER USED)   newix                                              No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   newvalue                                           Assigned : 870
Variable (used in/rexx) newvalue                                           Reference: 871

Variable (set w/rexx)   nix                                                Assigned : 147 154 161 166
Variable (in Stem Ref)  nix                                                Reference: 148 155 162 167

Variable (set w/rexx)   nomsg                                              Assigned : 1759 1776
Variable (used in/rexx) nomsg                                              Reference: 1785

Variable (set w/rexx)   numcols                                            Assigned : 733
Variable (used in/rexx) numcols                                            Reference: 717 734

Variable (set w/rexx)   numrows                                            Assigned : 682
Variable (used in/rexx) numrows                                            Reference: 685 704 707 716

Variable (set w/rexx)   nxtrc                                              Assigned : 1831
Variable (used in/rexx) nxtrc                                              Reference: 1832

Variable (set w/rexx)   ocols                                              Assigned : 682 1618
Variable (used in/rexx) ocols                                              Reference: 695 699 733 749

Variable (set w/rexx)   open_flag                                          Assigned : 331 1024 1053
Variable (used in/rexx) open_flag                                          Reference: 2452 2464
Variable (used in/rexx) open_flag                                          Expose Ref: 628 763

Variable (set w/rexx)   opsys                                              Assigned : 1703
Variable (used in/rexx) opsys                                              Reference: 1763

Variable (set w/rexx)   options_rc                                         Assigned : 130
Variable (used in/rexx) options_rc                                         Reference: 131 134

Variable (set w/rexx)   other_msg                                          Assigned : 1165 1212 1267 1386 1463
Variable (used in/rexx) other_msg                                          Reference: 1166 1213 1268 1387 1464

Variable (set w/rexx)   owner                                              Assigned : 1568
Variable (used in/rexx) owner                                              Reference: 1569 1573 1576

Variable (set w/rexx)   o_apf_data_set                                     Assigned : 824
Variable (used in/rexx) o_apf_data_set                                     Reference: 828 833 838

Variable (set w/rexx)   o_mbr_auth_count                                   Assigned : 824
Variable (used in/rexx) o_mbr_auth_count                                   Reference: 828 833 838

Variable (set w/rexx)   o_mbr_count                                        Assigned : 824
Variable (used in/rexx) o_mbr_count                                        Reference: 828 833 838

Variable (set w/rexx)   parameters                                         Assigned : 1830
Variable (used in/rexx) parameters                                         Reference: 1833 1851

Variable (set w/rexx)   parmix                                             Assigned : 1833
Variable (used in/rexx) parmix                                             Reference: 1843 1844 1849 1850

Variable (set w/rexx)   period                                             Assigned : 320
Variable (used in/rexx) period                                             Expose Ref: 628

Variable (set w/rexx)   pfx                                                Assigned : 682 747
Variable (used in/rexx) pfx                                                Reference: 746 749

Variable (set w/rexx)   pgm_person                                         Assigned : 62
Variable (used in/rexx) pgm_person                                         Reference: 1754

Variable (set w/rexx)   pgm_version                                        Assigned : 61
Variable (used in/rexx) pgm_version                                        Reference: 1754

Variable (set w/rexx)   pix                                                Assigned : 1850
Variable (used in/rexx) pix                                                Reference: 1851

Built-In+/External use  POS                                                Reference: F(750) F(1640) F(1643)

Variable (set w/rexx)   prefix                                             Assigned : 1706 1783
Variable (used in/rexx) prefix                                             Reference: 1787

Variable (set w/rexx)   previous_routine                                   Assigned : 819 937 2014 2476
Variable (NEVER USED)   previous_routine                                   No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   prgnm                                              Assigned : 1712
Variable (used in/rexx) prgnm                                              Reference: 1771

Label (internal label)  PRINT_TRACE_LINE                                   Defined  : 2472
Label (int. label ref)  PRINT_TRACE_LINE                                   Reference: C(963) C(972) C(1300) C(1919) C(1926) C(1933) C(1940)

Variable (set w/rexx)   print_trace_line_rc                                Assigned : 964 973 1301 1920 1927 1934 1941
Variable (NEVER USED)   print_trace_line_rc                                No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_ALLOC_RTN                                  Defined  : 344
Label (int. label ref)  PROCESS_ALLOC_RTN                                  Reference:

Label (internal label)  PROCESS_APF_DATASET                                Defined  : 713
Label (int. label ref)  PROCESS_APF_DATASET                                Reference: C(708)

Variable (set w/rexx)   process_apf_data_set                               Assigned : 1040 1067 1089
Variable (NEVER USED)   process_apf_data_set                               No Ref.  : If actually referenced, it must be via a cmd.
Label (internal label)  PROCESS_APF_DATA_SET                               Defined  : 763
Label (int. label ref)  PROCESS_APF_DATA_SET                               Reference: C(720)

Variable (set w/rexx)   process_apf_data_set_rc                            Assigned : 721
Variable (NEVER USED)   process_apf_data_set_rc                            No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_COLS_RTN                                   Defined  : 742
Label (int. label ref)  PROCESS_COLS_RTN                                   Reference: C(735)

Variable (set w/rexx)   process_cols_rtn_rc                                Assigned : 736
Variable (NEVER USED)   process_cols_rtn_rc                                No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_COLUMNS_RTN                                Defined  : 680
Label (int. label ref)  PROCESS_COLUMNS_RTN                                Reference: C(1609)

Variable (set w/rexx)   process_columns_rtn_rc                             Assigned : 1610
Variable (used in/rexx) process_columns_rtn_rc                             Reference: 1626

Label (internal label)  PROCESS_FIELD_RTN                                  Defined  : 864
Label (int. label ref)  PROCESS_FIELD_RTN                                  Reference: C(754)

Label (internal label)  PROCESS_FREE_RTN                                   Defined  : 357
Label (int. label ref)  PROCESS_FREE_RTN                                   Reference:

Label (internal label)  PROCESS_LMCLOSE_RC_RTN                             Defined  : 1176
Label (int. label ref)  PROCESS_LMCLOSE_RC_RTN                             Reference: C(1050)

Variable (set w/rexx)   process_lmclose_rc_rtn_rc                          Assigned : 1051
Variable (used in/rexx) process_lmclose_rc_rtn_rc                          Reference: 1052

Label (internal label)  PROCESS_LMFREE_RC_RTN                              Defined  : 1428
Label (int. label ref)  PROCESS_LMFREE_RC_RTN                              Reference: C(1099)

Variable (set w/rexx)   process_lmfree_rc_rtn_rc                           Assigned : 1100
Variable (used in/rexx) process_lmfree_rc_rtn_rc                           Reference: 1101

Label (internal label)  PROCESS_LMINIT_RC_RTN                              Defined  : 1223
Label (int. label ref)  PROCESS_LMINIT_RC_RTN                              Reference: C(1076)

Variable (set w/rexx)   process_lminit_rc_rtn_rc                           Assigned : 1077
Variable (NEVER USED)   process_lminit_rc_rtn_rc                           No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_LMMLIST_CMD_RC_RTN                         Defined  : 1278
Label (int. label ref)  PROCESS_LMMLIST_CMD_RC_RTN                         Reference: C(976)

Variable (set w/rexx)   process_lmmlist_cmd_rc_rtn_rc                      Assigned : 977
Variable (used in/rexx) process_lmmlist_cmd_rc_rtn_rc                      Reference: 979 981 989 992 1001

Label (internal label)  PROCESS_LMMLIST_OPTION                             Defined  : 1397
Label (int. label ref)  PROCESS_LMMLIST_OPTION                             Reference: C(1338)

Variable (set w/rexx)   process_lmmlist_option_rc                          Assigned : 1339
Variable (NEVER USED)   process_lmmlist_option_rc                          No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_LMOPEN_RC_RTN                              Defined  : 1108
Label (int. label ref)  PROCESS_LMOPEN_RC_RTN                              Reference: C(1021)

Variable (set w/rexx)   process_lmopen_rc_rtn_rc                           Assigned : 1022
Variable (used in/rexx) process_lmopen_rc_rtn_rc                           Reference: 1023

Label (internal label)  PROCESS_NUMS                                       Defined  : 908
Label (int. label ref)  PROCESS_NUMS                                       Reference: C(890)

Label (internal label)  PROCESS_RECORD_RTN                                 Defined  : 879
Label (int. label ref)  PROCESS_RECORD_RTN                                 Reference: C(869)

Label (internal label)  PROCESS_REXXTOOLS_ALLOC_RC_RTN                     Defined  : 435
Label (int. label ref)  PROCESS_REXXTOOLS_ALLOC_RC_RTN                     Reference: C(188) C(1492) C(2169) C(2332)

Variable (set w/rexx)   process_rexxtools_alloc_rc_rtn_rc                  Assigned : 189 351
Variable (NEVER USED)   process_rexxtools_alloc_rc_rtn_rc                  No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  PROCESS_REXXTOOLS_ALLOC_RTN                        Reference: C(350)

Variable (set w/rexx)   process_rexxtools_alloc_rtn_rc                     Assigned : 349
Variable (used in/rexx) process_rexxtools_alloc_rtn_rc                     Reference: 353

Label (internal label)  PROCESS_REXXTOOLS_FREE_RC_RTN                      Defined  : 488
Label (int. label ref)  PROCESS_REXXTOOLS_FREE_RC_RTN                      Reference: C(1523)

Label (internal label)  PROCESS_REXXTOOLS_FREE_RTN                         Defined  : 370
Label (int. label ref)  PROCESS_REXXTOOLS_FREE_RTN                         Reference: C(363)

Variable (set w/rexx)   process_rexxtools_free_rtn_rc                      Assigned : 362 364
Variable (used in/rexx) process_rexxtools_free_rtn_rc                      Reference: 366

Label (internal label)  PROCESS_ROWS_RTN                                   Defined  : 730
Label (int. label ref)  PROCESS_ROWS_RTN                                   Reference: C(705)

Label (internal label)  PROCESS_SUBSELECT                                  Defined  : 1911
Label (int. label ref)  PROCESS_SUBSELECT                                  Reference: C(1302)

Variable (set w/rexx)   process_subselect_rc                               Assigned : 1303
Variable (NEVER USED)   process_subselect_rc                               No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  PROCESS_TEXT                                       Defined  : 919
Label (int. label ref)  PROCESS_TEXT                                       Reference: C(886) C(893)

Label (internal label)  PROCESS_TSO_ALLOC_RC_RTN                           Defined  : 400
Label (int. label ref)  PROCESS_TSO_ALLOC_RC_RTN                           Reference: C(192) C(1496) C(2173) C(2336)

Variable (set w/rexx)   process_tso_alloc_rc_rtn_rc                        Assigned : 193
Variable (used in/rexx) process_tso_alloc_rc_rtn_rc                        Reference: 353

Label (internal label)  PROCESS_TSO_FREE_RC_RTN                            Defined  : 527
Label (int. label ref)  PROCESS_TSO_FREE_RC_RTN                            Reference: C(1527)

Variable (NEVER SET)    PROCESS_TSO_FREE_RC_RTN_RC                         Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) PROCESS_TSO_FREE_RC_RTN_RC                         Reference: 366

Label (internal label)  PROCESS_TSO_FREE_RTN                               Defined  : 385
Label (int. label ref)  PROCESS_TSO_FREE_RTN                               Reference:

Variable (set w/rexx)   racfgrp                                            Assigned : 1711
Variable (used in/rexx) racfgrp                                            Reference: 1771

SpecialVar(set no-XREF) rc                                                  *Special: No xref; set w/ADDR env cmd and/or REXX itself
SpecialVar(set w/ code) rc                                                 Assigned : 1555 1625
SpecialVar(used w/rexx) rc                                                 Reference: 130 139 142 180 185 241 250 293 376 378 380 391 393 395 585
                        ...                                                           959 1016 1020 1030 1045 1049 1057 1075 1094 1098 1103 1490
                        ...                                                           1521 1592 1626 1970 1982 1994 2007 2017 2102 2115 2129 2143
                        ...                                                           2167 2266 2279 2292 2305 2330 2393 2406 2419 2432

Variable (set w/rexx)   rc_00_msg                                          Assigned : 1117 1186 1233 1290 1438
Variable (used in/rexx) rc_00_msg                                          Reference: 1297

Variable (set w/rexx)   rc_00_msg_free                                     Assigned : 1292
Variable (used in/rexx) rc_00_msg_free                                     Reference: 1925

Variable (set w/rexx)   rc_00_msg_list                                     Assigned : 1291
Variable (used in/rexx) rc_00_msg_list                                     Reference: 1918

Variable (set w/rexx)   rc_00_msg_save                                     Assigned : 1293
Variable (used in/rexx) rc_00_msg_save                                     Reference: 1932

Variable (set w/rexx)   rc_04_msg                                          Assigned : 451 1307
Variable (used in/rexx) rc_04_msg                                          Reference: 453 1308

Variable (set w/rexx)   rc_08_msg                                          Assigned : 459 1122 1191 1238 1315 1443
Variable (used in/rexx) rc_08_msg                                          Reference: 460 1123 1192 1240

Variable (set w/rexx)   rc_08_msg_free                                     Assigned : 1317
Variable (used in/rexx) rc_08_msg_free                                     Reference: 1326

Variable (set w/rexx)   rc_08_msg_list                                     Assigned : 1316
Variable (used in/rexx) rc_08_msg_list                                     Reference: 1323

Variable (set w/rexx)   rc_08_msg_save                                     Assigned : 1318
Variable (used in/rexx) rc_08_msg_save                                     Reference: 1330

Variable (set w/rexx)   rc_10_msg                                          Assigned : 1129 1198 1347 1450
Variable (used in/rexx) rc_10_msg                                          Reference: 1130 1199 1346 1348

Variable (set w/rexx)   rc_12_msg                                          Assigned : 470 1136 1246 1355
Variable (used in/rexx) rc_12_msg                                          Reference: 472 1141 1247 1360

Variable (set w/rexx)   rc_12_msg1                                         Assigned : 1356
Variable (used in/rexx) rc_12_msg1                                         Reference: 1361

Variable (set w/rexx)   rc_12_msg2                                         Assigned : 1357
Variable (used in/rexx) rc_12_msg2                                         Reference: 1362

Variable (set w/rexx)   rc_12_msg3                                         Assigned : 1358
Variable (used in/rexx) rc_12_msg3                                         Reference: 1363

Variable (set w/rexx)   rc_12_msg4                                         Assigned : 1359
Variable (used in/rexx) rc_12_msg4                                         Reference: 1364

Variable (set w/rexx)   rc_12_msg_1                                        Assigned : 1137
Variable (used in/rexx) rc_12_msg_1                                        Reference: 1142

Variable (set w/rexx)   rc_12_msg_2                                        Assigned : 1138
Variable (used in/rexx) rc_12_msg_2                                        Reference: 1143

Variable (set w/rexx)   rc_12_msg_3                                        Assigned : 1139
Variable (used in/rexx) rc_12_msg_3                                        Reference: 1144

Variable (set w/rexx)   rc_12_msg_4                                        Assigned : 1140
Variable (used in/rexx) rc_12_msg_4                                        Reference: 1145

Variable (set w/rexx)   rc_16_msg                                          Assigned : 1151 1253 1371
Variable (used in/rexx) rc_16_msg                                          Reference: 1152 1254 1372

Variable (set w/rexx)   rc_20_msg                                          Assigned : 1158 1205 1260 1379 1457
Variable (used in/rexx) rc_20_msg                                          Reference: 1159 1206 1261 1380

Variable (set w/rexx)   regk                                               Assigned : 1713
Variable (used in/rexx) regk                                               Reference: 1769

Variable (set w/rexx)   remainder                                          Assigned : 117 203 236 258 289 347 360 373 388 403 439 491 530 852 870
                        ...                                                           942 1011 1039 1066 1087 1637 1733 1735 1742 1744
Variable (used in/rexx) remainder                                          Reference: 1735 1737 1744 1746

Variable (set w/rexx)   reminder                                           Assigned : 1112 1180 1227 1282 1432
Variable (NEVER USED)   reminder                                           No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  REMQUOTE                                           Defined  : 1631
Label (int. label ref)  REMQUOTE                                           Reference: F(126) F(183) F(239) F(291) F(957) F(1018) F(1047) F(1073)
                        ...                                                           F(1096) F(1488) F(1519) F(2165) F(2328)

Variable (set w/rexx)   req                                                Assigned : 630
Variable (NEVER USED)   req                                                No Ref.  : If actually referenced, it must be via a cmd.

SpecialVar(set no-XREF) RESULT                                              *Special: No xref; set w/ADDR env cmd and/or REXX itself
SpecialVar(used w/rexx) RESULT                                             Reference: 77 81 91 94 96 104 135 189 193 307 309 311 351 364 721 736
                        ...                                                           773 776 779 782 796 803 806 842 964 973 977 1022 1051 1077
                        ...                                                           1100 1301 1303 1339 1493 1497 1524 1528 1610 1920 1927 1934
                        ...                                                           1941 2170 2174 2333 2337 2440 2442

Variable (set w/rexx)   rexxtools_available                                Assigned : 1897 1902 2065 2070 2230 2235 2357 2362
Variable (used in/rexx) rexxtools_available                                Reference: 127 187 826 1480 1491 1511 1522 2157 2168 2320 2331
Variable (used in/rexx) rexxtools_available                                Expose Ref: 763

Variable (NEVER SET)    REXXTOOL_AVAILABLE                                 Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) REXXTOOL_AVAILABLE                                 Reference: 348 361

Built-In+/External use  RIGHT                                              Reference: F(838)

Variable (set w/rexx)   row_ix                                             Assigned : 704 707 716
Variable (used in/rexx) row_ix                                             Reference: 749 873
Variable (used in/rexx) row_ix                                             Expose Ref: 763
Variable (in Stem Set)  row_ix                                             Assigned : 871
Variable (in Stem Ref)  row_ix                                             Reference: 718 719

Variable (set w/rexx)   rtime                                              Assigned : 1652
Variable (NEVER USED)   rtime                                              No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  RXADDHST                                           Reference: C(1894) C(1895) C(2062) C(2063) C(2227) C(2228) C(2354)
                        ...                                                           C(2355)

Built-In+/External use  RXQUERY                                            Reference: F(1889) F(2057) F(2222) F(2349)

Variable (set w/rexx)   rxtools_rc                                         Assigned : 1888 1906 2056 2074 2221 2239 2348 2366
Variable (NEVER USED)   rxtools_rc                                         No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   rxt_rc                                             Assigned : 1889 2057 2222 2349
Variable (used in/rexx) rxt_rc                                             Reference: 1893 1906 2061 2074 2226 2239 2353 2366

Variable (NEVER SET)    S99ERROR                                           Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) S99ERROR                                           Reference: 454

Variable (NEVER SET)    S99INFO                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) S99INFO                                            Reference: 454

Variable (NEVER SET)    SDSFOCOLS                                          Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) SDSFOCOLS                                          Reference: 1609

Variable (set w/rexx)   sdsf_columns                                       Assigned : 696 700
Variable (used in/rexx) sdsf_columns                                       Reference: 700 702

Variable (set w/rexx)   sdsf_high_rc                                       Assigned : 1557 1626
Variable (NEVER USED)   sdsf_high_rc                                       No Ref.  : If actually referenced, it must be via a cmd.

Label (internal label)  SDSF_ROUTINE                                       Defined  : 1538
Label (int. label ref)  SDSF_ROUTINE                                       Reference: C(95)

Variable (set w/rexx)   sdsf_routine_rc                                    Assigned : 96
Variable (used in/rexx) sdsf_routine_rc                                    Reference: 105

Label (internal label)  SET_VARIABLES                                      Defined  : 315
Label (int. label ref)  SET_VARIABLES                                      Reference: C(90)

Variable (set w/rexx)   set_variables_rc                                   Assigned : 91
Variable (NEVER USED)   set_variables_rc                                   No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   shcenv                                             Assigned : 58
Variable (NEVER USED)   shcenv                                             No Ref.  : If actually referenced, it must be via a cmd.

SpecialVar(set no-XREF) SIGL                                                *Special: No xref; set w/ADDR env cmd and/or REXX itself
SpecialVar(used w/rexx) SIGL                                               Reference: 1955 1967 1979 1991 2004 2018 2085 2099 2112 2126 2140 2250
                        ...                                                           2263 2276 2289 2302 2377 2390 2403 2416 2429

Variable (set w/rexx)   smfid                                              Assigned : 1695
Variable (used in/rexx) smfid                                              Reference: 1760

Variable (set w/rexx)   sms                                                Assigned : 1701
Variable (used in/rexx) sms                                                Reference: 1767

Variable (set w/rexx)   squote                                             Assigned : 317
Variable (used in/rexx) squote                                             Reference: 1639
Variable (used in/rexx) squote                                             Expose Ref: 628 763 1631

Variable (set w/rexx)   squotei                                            Assigned : 1639
Variable (used in/rexx) squotei                                            Reference: 1640 1643

Variable (set w/rexx)   squote_pos                                         Assigned : 1640 1643
Variable (used in/rexx) squote_pos                                         Reference: 1641 1642

Variable (set w/rexx)   standard_date                                      Assigned : 1677
Variable (used in/rexx) standard_date                                      Reference: 1704

Label (internal label)  START_MESSAGE                                      Defined  : 1650
Label (int. label ref)  START_MESSAGE                                      Reference: C(80)

Variable (set w/rexx)   start_msg                                          Assigned : 1678
Variable (used in/rexx) start_msg                                          Reference: 1757

Label (internal label)  START_PROGRAM                                      Defined  : 54
Label (int. label ref)  START_PROGRAM                                      Reference:

Variable (set w/rexx)   start_rc                                           Assigned : 81
Variable (NEVER USED)   start_rc                                           No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  SUBSTR                                             Reference: F(321) F(322) F(326) F(896) F(900) F(1705) F(1714)

Variable (set w/rexx)   subtitle_librow_cols                               Assigned : 785
Variable (NEVER USED)   subtitle_librow_cols                               No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   symd_ldate                                         Assigned : 1704
Variable (used in/rexx) symd_ldate                                         Reference: 1705

Variable (set w/rexx)   symd_sldate                                        Assigned : 1705
Variable (used in/rexx) symd_sldate                                        Reference: 325 1779

Built-In+/External use  SYNTAX (SIGNAL OFF SYNTAX)                         Reference: S(2480)

Variable (set w/rexx)   sysclone                                           Assigned : 1698
Variable (NEVER USED)   sysclone                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    SYSDSNAME                                          Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) SYSDSNAME                                          Reference: 1731

Variable (NEVER SET)    SYSMSGLVL1                                         Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) SYSMSGLVL1                                         Reference: 1797 2189

Variable (NEVER SET)    SYSMSGLVL2                                         Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) SYSMSGLVL2                                         Reference: 1798 2190

Variable (set w/rexx)   sysname                                            Assigned : 1699
Variable (used in/rexx) sysname                                            Reference: 118 321 1760 1896 1901 2064 2069 2229 2234 2356 2361

Variable (set w/rexx)   sysplex                                            Assigned : 1696
Variable (used in/rexx) sysplex                                            Reference: 1760

Variable (NEVER SET)    SYSREASON                                          Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) SYSREASON                                          Reference: 1750 1796 2188

Variable (set w/rexx)   sysseclab                                          Assigned : 1697
Variable (NEVER USED)   sysseclab                                          No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  SYSVAR                                             Reference: F(1679) F(1680) F(1681) F(1682) F(1683) F(1684) F(1685)
                        ...                                                           F(1686) F(1687) F(1688) F(1689) F(1690) F(1691) F(1692)
                        ...                                                           F(1693) F(1694)

Variable (set w/rexx)   sys_env                                            Assigned : 1682
Variable (used in/rexx) sys_env                                            Reference: 1716 1778 1817 2044 2209

Variable (set w/rexx)   sys_hsm                                            Assigned : 1686
Variable (NEVER USED)   sys_hsm                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_jes                                            Assigned : 1687
Variable (used in/rexx) sys_jes                                            Reference: 1765

Variable (set w/rexx)   sys_lracf                                          Assigned : 1688
Variable (NEVER USED)   sys_lracf                                          No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_lterm                                          Assigned : 1680
Variable (NEVER USED)   sys_lterm                                          No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_nest                                           Assigned : 1683
Variable (NEVER USED)   sys_nest                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_node                                           Assigned : 1690
Variable (used in/rexx) sys_node                                           Reference: 1765

Variable (set w/rexx)   sys_pcmd                                           Assigned : 1684
Variable (NEVER USED)   sys_pcmd                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_proc                                           Assigned : 1679
Variable (NEVER USED)   sys_proc                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_racf                                           Assigned : 1689
Variable (NEVER USED)   sys_racf                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_scmd                                           Assigned : 1685
Variable (NEVER USED)   sys_scmd                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_termid                                         Assigned : 1692
Variable (NEVER USED)   sys_termid                                         No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_tsoe                                           Assigned : 1691
Variable (NEVER USED)   sys_tsoe                                           No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   sys_wterm                                          Assigned : 1681
Variable (NEVER USED)   sys_wterm                                          No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    TIME                                               Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) TIME                                               Reference: 173
Built-In+/External use  TIME                                               Reference: F(145) F(146) F(148) F(152) F(153) F(155) F(159) F(160)
                        ...                                                           F(162) F(167) F(186) F(206) F(209) F(212) F(215) F(219)
                        ...                                                           F(222) F(226) F(243) F(247) F(261) F(264) F(267) F(271)
                        ...                                                           F(276) F(280) F(295) F(298) F(323) F(405) F(441) F(493)
                        ...                                                           F(532) F(587) F(641) F(683) F(948) F(969) F(1012) F(1041)
                        ...                                                           F(1068) F(1090) F(1113) F(1182) F(1229) F(1284) F(1298)
                        ...                                                           F(1434) F(1603) F(1809) F(1812) F(1813) F(1896) F(1901)
                        ...                                                           F(1959) F(2036) F(2039) F(2040) F(2064) F(2069) F(2089)
                        ...                                                           F(2201) F(2204) F(2205) F(2229) F(2234) F(2254) F(2356)
                        ...                                                           F(2361) F(2381) F(2483)

Built-In+/External use  TRACE                                              Reference: F(196) F(251) F(484) F(726) F(759) F(814) F(843) F(860)
                        ...                                                           F(1031) F(1058) F(1078) F(1104) F(1172) F(1219) F(1274)
                        ...                                                           F(1393) F(1469) F(1501) F(1531) F(1533) F(1633) F(1646)
                        ...                                                           F(1831) F(1832) F(1880) F(1989) F(2124) F(2178) F(2287)
                        ...                                                           F(2341) F(2414)

Variable (set w/rexx)   trace_option                                       Assigned : 1842 1858
Variable (used in/rexx) trace_option                                       Reference: 2482
Variable (used in/rexx) trace_option                                       Expose Ref: 763 2472

Built-In+/External use  TRANSLATE                                          Reference: F(145) F(146) F(148) F(152) F(153) F(155) F(159) F(160)
                        ...                                                           F(162) F(167) F(173) F(186) F(206) F(209) F(212) F(215)
                        ...                                                           F(219) F(222) F(226) F(243) F(247) F(261) F(264) F(267)
                        ...                                                           F(271) F(276) F(280) F(295) F(298) F(324) F(405) F(441)
                        ...                                                           F(493) F(532) F(587) F(838) F(840) F(853) F(948) F(969)
                        ...                                                           F(1012) F(1041) F(1068) F(1090) F(1113) F(1182) F(1229)
                        ...                                                           F(1284) F(1298) F(1434) F(1603) F(1636) F(1645) F(1715)
                        ...                                                           F(1809) F(1844) F(1959) F(1971) F(1983) F(1995) F(2008)
                        ...                                                           F(2023) F(2036) F(2089) F(2103) F(2116) F(2130) F(2144)
                        ...                                                           F(2201) F(2254) F(2267) F(2280) F(2293) F(2306) F(2381)
                        ...                                                           F(2394) F(2407) F(2420) F(2433) F(2483)

Label (internal label)  TRAP_ERROR_RTN                                     Defined  : 1963 ///Dup. IGNORED LABEL def's: 2094 2258 2385
Label (int. label ref)  TRAP_ERROR_RTN                                     Reference:

Label (internal label)  TRAP_FAILURE_RTN                                   Defined  : 1975 ///Dup. IGNORED LABEL def's: 2107 2271 2398
Label (int. label ref)  TRAP_FAILURE_RTN                                   Reference:

Built-In+/External use  TRAP_FAILURE_RTN (SIGNAL ON FAILURE   TRAP_FAILURE_RTN)
                        ...                                                Reference: S(83)

Label (internal label)  TRAP_HALT_RTN                                      Defined  : 1987 ///Dup. IGNORED LABEL def's: 2121 2284 2411
Label (int. label ref)  TRAP_HALT_RTN                                      Reference:

Built-In+/External use  TRAP_HALT_RTN (SIGNAL ON HALT   TRAP_HALT_RTN)     Reference: S(82)

Label (internal label)  TRAP_NOVALUE_RTN                                   Defined  : 2000 ///Dup. IGNORED LABEL def's: 2135 2297 2424
Label (int. label ref)  TRAP_NOVALUE_RTN                                   Reference:

Built-In+/External use  TRAP_NOVALUE_RTN (SIGNAL ON NOVALUE   TRAP_NOVALUE_RTN)
                        ...                                                Reference: S(84)

Variable (set w/rexx)   trap_rc                                            Assigned : 2017
Variable (used in/rexx) trap_rc                                            Reference: 2021 2022

Label (internal label)  TRAP_SYNTAX_RTN                                    Defined  : 2013
Label (int. label ref)  TRAP_SYNTAX_RTN                                    Reference:

Built-In+/External use  TRAP_SYNTAX_RTN (SIGNAL ON SYNTAX   TRAP_SYNTAX_RTN)
                        ...                                                Reference: S(85)

Variable (set w/rexx)   txrc                                               Assigned : 1989 2124 2287 2414
Variable (NEVER USED)   txrc                                               No Ref.  : If actually referenced, it must be via a cmd.

Built-In+/External use  USERID                                             Reference: F(125) F(1568) F(1771)

Variable (set w/rexx)   variable                                           Assigned : 749
Variable (used in/rexx) variable                                           Reference: 750

Variable (set w/rexx)   varpos                                             Assigned : 750
Variable (NEVER USED)   varpos                                             No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    VARSTEM                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) VARSTEM                                            Reference: 753 871 884

Variable (set w/rexx)   varvalue                                           Assigned : 897 913 925 928
Variable (used in/rexx) varvalue                                           Reference: 870 889 897 913 914 924 925 930

Variable (set w/rexx)   verbose                                            Assigned : 1562 1841 1854 1857
Variable (used in/rexx) verbose                                            Reference: 643 1591 1842
Variable (used in/rexx) verbose                                            Expose Ref: 628

Built-In+/External use  WORD                                               Reference: F(700) F(718) F(719) F(749) F(770) F(790) F(1040) F(1067)
                        ...                                                           F(1089) F(1477) F(1851) F(2153) F(2316)

Built-In+/External use  WORDS                                              Reference: F(699) F(733) F(788) F(1833)

Label (internal label)  WRITE_CSV_FILE                                     Defined  : 232
Label (int. label ref)  WRITE_CSV_FILE                                     Reference: C(308)

Variable (set w/rexx)   write_csv_file_rc                                  Assigned : 309
Variable (NEVER USED)   write_csv_file_rc                                  No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   x                                                  Assigned : 1720 1734 1743 1751
Variable (used in/rexx) x                                                  Reference: 1736 1745
Variable (in Stem Set)  x                                                  Assigned : 1735 1744

Variable (set w/rexx)   xmsg                                               Assigned : 67 137 581 590
Variable (used in/rexx) xmsg                                               Reference: 590
Variable (used in/rexx) xmsg                                               Expose Ref: 628 763 1631

Variable (set w/rexx)   xtrc                                               Assigned : 56 66 196 251 484 726 759 814 843 860 1031 1058 1078 1104
                        ...                                                           1172 1219 1274 1393 1469 1501 1531 1533 1633 1646 1832 1880
                        ...                                                           2178 2341
Variable (used in/rexx) xtrc                                               Reference: 196 251 484 726 759 814 843 860 1031 1058 1078 1104 1172
                        ...                                                           1219 1274 1393 1469 1501 1531 1533 1646 2178 2341
Variable (used in/rexx) xtrc                                               Expose Ref: 628 763 1631 2472

Variable (set w/rexx)   xtrce                                              Assigned : 1838
Variable (NEVER USED)   xtrce                                              No Ref.  : If actually referenced, it must be via a cmd.

Variable (set w/rexx)   zispfrc                                            Assigned : 107 2467
Variable (NEVER USED)   zispfrc                                            No Ref.  : If actually referenced, it must be via a cmd.

Variable (NEVER SET)    ZLAC                                               Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLAC                                               Reference: 793 962 984

Variable (NEVER SET)    ZLALIAS                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLALIAS                                            Reference: 793

Variable (NEVER SET)    ZLAMODE                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLAMODE                                            Reference: 793

Variable (NEVER SET)    ZLATTR                                             Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLATTR                                             Reference: 793

Variable (NEVER SET)    ZLRMODE                                            Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLRMODE                                            Reference: 793

Variable (NEVER SET)    ZLSIZE                                             Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLSIZE                                             Reference: 793

Variable (NEVER SET)    ZLSSI                                              Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLSSI                                              Reference: 793

Variable (NEVER SET)    ZLTTR                                              Not Assgn: EITHER used as upper case value OR set via cmd
Variable (used in/rexx) ZLTTR                                              Reference: 793
    xref (1 of 2) ends here
    xref (1 of 2) ends here
    -----------------------

    xref (2 of 2) section 2 is for stem variable xreference.
    xref (2 of 2) section 2 is for stem variable xreference.
    ----------------------------------------------------------
       note:     Assignments/references to rexx stems
              is only for stem references in rexx code
              itself.

                 Therefore, references to stem variables
              that are made INSIDE of quotes, say as
              part of an EXECIO command, will NOT show
              up in the XREF as they are part of a "string
              constant" and not used as a rexx variable or
              rexx stem directly.

                 This is because it often may not be obvious
              which address environment a command may (or may
              not) be valid in.  Or for us to know all the
              ways a rexx stem might be used.

    ----------------------------------------------------------







Stem-1 $RXTIDCMS.0                 Reference: 147 154 161 166
Stem-1 $RXTIDCMS.nix               Reference: 148 155 162 167

Stem-1 ALLOC_MSGS.                 Assigned : 1834
Stem-1 ALLOC_MSGS.0                Assigned : 1836
Stem-1 ALLOC_MSGS.0                Reference: 419 467

Stem-1 CSV_LINE.                   Expose Ref: 628 763 2472
Stem-1 CSV_LINE.0                  Assigned : 859
Stem-1 CSV_LINE.0                  Reference: 243
Stem-1 CSV_LINE.0                  Expose Ref: 628 763 2472
Stem-1 CSV_LINE.csv_lineix         Assigned : 855

Stem-1 DELETE_MSGS.                Assigned : 1835
Stem-1 DELETE_MSGS.0               Assigned : 1837

Stem-1 FILE_ARRAY.                 Assigned : 327 1621
Stem-1 FILE_ARRAY.0                Assigned : 329 1622
Stem-1 FILE_ARRAY.0                Reference: 866

Stem-1 FREE_MSGS.0                 Reference: 511 550

Stem-1 INFO_NODE.#                 Reference: 1783
Stem-1 INFO_NODE.0                 Assigned : 1732 1736 1741 1745
Stem-1 INFO_NODE.0                 Reference: 1734 1743
Stem-1 INFO_NODE.x                 Assigned : 1735 1744

Stem-1 ISFMSG2.                    Expose Ref: 628
Stem-1 ISFMSG2.0                   Reference: 644
Stem-1 ISFMSG2.ix                  Reference: 645

Stem-1 LISTS.#                     Assigned : 1586
Stem-1 LISTS.0                     Assigned : 1587
Stem-1 LISTS.0                     Reference: 1588
Stem-1 LISTS.lix                   Reference: 1589

Stem-1 MBRLIST.                    Assigned : 337 1026

Stem-1 NEW_LIST.                   Expose Ref: 628
Stem-1 NEW_LIST.0                  Assigned : 873
Stem-2 NEW_LIST.0.0                Assigned : 872
Stem-2 NEW_LIST.row_ix.col_ix      Assigned : 871
Stem-2 NEW_LIST.row_ix.col_ix      Reference: 718 719
    xref (2 of 2) ends here
    xref (2 of 2) ends here
    -----------------------


 ------------ tips for label references ----------------------------
 ------------ tips for label references ----------------------------
     tip:  c# is a ref to CALL stmt to this   internal/external name
     tip:  f# is a ref to FUNCTION call to    internal/external function
     tip:  s# is a ref to SIGNAL stmt to this internal label


 ------------ now xreference for stem variables (tips) -------------
 ------------ now xreference for stem variables (tips) -------------
     tip:     Note:- stem variables (after 1st period) are in lower case
     tip:          - stem "constants" (will be shown in UPPER case)
     tip:          - stem "constants" that are whole numbers (and not 0)
     tip:               will be summarized as a # sign (in place of
     tip:               individual digits/numbers) so it summarizes them.
     tip:     What XREF for stems can help you fix:
     tip:     -------------------------------------
     tip:      - seeing a variable (lower case) used in a stem where you
     tip:       EXPECTED it to always be a constant.
     tip:      - seeing a constant (upper case) used in a stem where you
     tip:       EXPECTED it to be a variable (maybe it was misspelled).
     tip:                                              )
     tip:line sample rexx code (followed by sample xref)
     tip:---- ------------
     tip:  1     x = "Richard"
     tip:  2     firstName.y.x.1 = "Hi"
     tip:  3     firstName.y.x.2 = "Buddy"
     tip:  4     firstName.y.x.0 = 2
     tip:
     tip:sample xref listing
     tip:-----------
     tip:  --xref section 1 (variables)
     tip:  --xref section 1 (variables)
     tip:
     tip:Variable (set)         X               Assigned : 1
     tip:Variable(w/ stem use): X               Reference: 2 3 4
     tip:Constant(w/ stem use): Y               Reference: 2 3 4
     tip:
     tip:  --xref section 2 (stem variables)
     tip:  --xref section 2 (stem variables)
     tip:
     tip:Stem-3 FIRSTNAME.Y.x.#                 Assigned : 2 3
     tip:Stem-3 FIRSTNAME.Y.x.0                 Assigned : 4
     tip:                                       Reference: 2 3 4
     tip:     note:  Stem-3 refers to # of periods in the stem.
     tip:
     tip:  rexx tip: remember stem value on the right is "tricky":
     tip:        Given following rexx code:
     tip:             x = "RICHARD.HUMPHRIS"
     tip:             y = "RICHARD"
     tip:             z = "HUMPHRIS"
     tip:        References to a stem variable, as shown below, are
     tip:          referring to the SAME stem variable:
     tip:             stem.x     refers to STEM.RICHARD.HUMPHRIS
     tip:             stem.y.z   refers to STEM.RICHARD.HUMPHRIS
     tip:        This is because x contains a period.  And because
     tip:          everything to the right of the first period is evaluated
     tip:          first.  Then the stem variable is "looked up".
     tip:
     tip:   rexx tip:  referencing pgm above, if you set variable "a"
     tip:         to a upper/lower case value.  The stem will NOT upper
     tip:         case it.
     tip:        So if assignment statement set "a" to "richard"
     tip:         then stem.y is NOT the same as stem.a
     tip:        Because stem.y    refers to STEM.RICHARD
     tip:        and     stem.a    refers to STEM.richard
     tip:
